
LAB 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000255c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002668  08002668  00012668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800268c  0800268c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800268c  0800268c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800268c  0800268c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800268c  0800268c  0001268c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002690  08002690  00012690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000060  080026f4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  080026f4  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086cc  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001532  00000000  00000000  00028755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  00029c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002a5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001634d  00000000  00000000  0002aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009642  00000000  00000000  000411fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008221b  00000000  00000000  0004a83f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cca5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026d4  00000000  00000000  000ccab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002650 	.word	0x08002650

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002650 	.word	0x08002650

0800014c <display7SEG>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void display7SEG(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin,GPIO_PIN_SET ) ;
 8000154:	2201      	movs	r2, #1
 8000156:	2101      	movs	r1, #1
 8000158:	4885      	ldr	r0, [pc, #532]	; (8000370 <display7SEG+0x224>)
 800015a:	f001 fa57 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin,GPIO_PIN_SET ) ;
 800015e:	2201      	movs	r2, #1
 8000160:	2102      	movs	r1, #2
 8000162:	4883      	ldr	r0, [pc, #524]	; (8000370 <display7SEG+0x224>)
 8000164:	f001 fa52 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin,GPIO_PIN_SET ) ;
 8000168:	2201      	movs	r2, #1
 800016a:	2104      	movs	r1, #4
 800016c:	4880      	ldr	r0, [pc, #512]	; (8000370 <display7SEG+0x224>)
 800016e:	f001 fa4d 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin,GPIO_PIN_SET ) ;
 8000172:	2201      	movs	r2, #1
 8000174:	2108      	movs	r1, #8
 8000176:	487e      	ldr	r0, [pc, #504]	; (8000370 <display7SEG+0x224>)
 8000178:	f001 fa48 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin,GPIO_PIN_SET ) ;
 800017c:	2201      	movs	r2, #1
 800017e:	2110      	movs	r1, #16
 8000180:	487b      	ldr	r0, [pc, #492]	; (8000370 <display7SEG+0x224>)
 8000182:	f001 fa43 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin,GPIO_PIN_SET )  ;
 8000186:	2201      	movs	r2, #1
 8000188:	2120      	movs	r1, #32
 800018a:	4879      	ldr	r0, [pc, #484]	; (8000370 <display7SEG+0x224>)
 800018c:	f001 fa3e 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin,GPIO_PIN_SET ) ;
 8000190:	2201      	movs	r2, #1
 8000192:	2140      	movs	r1, #64	; 0x40
 8000194:	4876      	ldr	r0, [pc, #472]	; (8000370 <display7SEG+0x224>)
 8000196:	f001 fa39 	bl	800160c <HAL_GPIO_WritePin>

	if(num == 0){
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d118      	bne.n	80001d2 <display7SEG+0x86>
		HAL_GPIO_TogglePin ( SEG0_GPIO_Port , SEG0_Pin ) ;
 80001a0:	2101      	movs	r1, #1
 80001a2:	4873      	ldr	r0, [pc, #460]	; (8000370 <display7SEG+0x224>)
 80001a4:	f001 fa4a 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG1_GPIO_Port , SEG1_Pin ) ;
 80001a8:	2102      	movs	r1, #2
 80001aa:	4871      	ldr	r0, [pc, #452]	; (8000370 <display7SEG+0x224>)
 80001ac:	f001 fa46 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG2_GPIO_Port , SEG2_Pin ) ;
 80001b0:	2104      	movs	r1, #4
 80001b2:	486f      	ldr	r0, [pc, #444]	; (8000370 <display7SEG+0x224>)
 80001b4:	f001 fa42 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG3_GPIO_Port , SEG3_Pin ) ;
 80001b8:	2108      	movs	r1, #8
 80001ba:	486d      	ldr	r0, [pc, #436]	; (8000370 <display7SEG+0x224>)
 80001bc:	f001 fa3e 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG4_GPIO_Port , SEG4_Pin ) ;
 80001c0:	2110      	movs	r1, #16
 80001c2:	486b      	ldr	r0, [pc, #428]	; (8000370 <display7SEG+0x224>)
 80001c4:	f001 fa3a 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG5_GPIO_Port , SEG5_Pin ) ;
 80001c8:	2120      	movs	r1, #32
 80001ca:	4869      	ldr	r0, [pc, #420]	; (8000370 <display7SEG+0x224>)
 80001cc:	f001 fa36 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG2_GPIO_Port , SEG2_Pin ) ;
		//HAL_GPIO_TogglePin ( SEG4_GPIO_Port , SEG4_Pin ) ;
		HAL_GPIO_TogglePin ( SEG5_GPIO_Port , SEG5_Pin ) ;
		HAL_GPIO_TogglePin ( SEG6_GPIO_Port , SEG6_Pin ) ;
	}
}
 80001d0:	e0ca      	b.n	8000368 <display7SEG+0x21c>
	else if (num == 1){
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d108      	bne.n	80001ea <display7SEG+0x9e>
		HAL_GPIO_TogglePin ( SEG1_GPIO_Port , SEG1_Pin ) ;
 80001d8:	2102      	movs	r1, #2
 80001da:	4865      	ldr	r0, [pc, #404]	; (8000370 <display7SEG+0x224>)
 80001dc:	f001 fa2e 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG2_GPIO_Port , SEG2_Pin ) ;
 80001e0:	2104      	movs	r1, #4
 80001e2:	4863      	ldr	r0, [pc, #396]	; (8000370 <display7SEG+0x224>)
 80001e4:	f001 fa2a 	bl	800163c <HAL_GPIO_TogglePin>
}
 80001e8:	e0be      	b.n	8000368 <display7SEG+0x21c>
	else if (num == 2){
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2b02      	cmp	r3, #2
 80001ee:	d114      	bne.n	800021a <display7SEG+0xce>
		HAL_GPIO_TogglePin ( SEG0_GPIO_Port , SEG0_Pin ) ;
 80001f0:	2101      	movs	r1, #1
 80001f2:	485f      	ldr	r0, [pc, #380]	; (8000370 <display7SEG+0x224>)
 80001f4:	f001 fa22 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG1_GPIO_Port , SEG1_Pin ) ;
 80001f8:	2102      	movs	r1, #2
 80001fa:	485d      	ldr	r0, [pc, #372]	; (8000370 <display7SEG+0x224>)
 80001fc:	f001 fa1e 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG3_GPIO_Port , SEG3_Pin ) ;
 8000200:	2108      	movs	r1, #8
 8000202:	485b      	ldr	r0, [pc, #364]	; (8000370 <display7SEG+0x224>)
 8000204:	f001 fa1a 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG4_GPIO_Port , SEG4_Pin ) ;
 8000208:	2110      	movs	r1, #16
 800020a:	4859      	ldr	r0, [pc, #356]	; (8000370 <display7SEG+0x224>)
 800020c:	f001 fa16 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG6_GPIO_Port , SEG6_Pin ) ;
 8000210:	2140      	movs	r1, #64	; 0x40
 8000212:	4857      	ldr	r0, [pc, #348]	; (8000370 <display7SEG+0x224>)
 8000214:	f001 fa12 	bl	800163c <HAL_GPIO_TogglePin>
}
 8000218:	e0a6      	b.n	8000368 <display7SEG+0x21c>
	else if (num == 3){
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	2b03      	cmp	r3, #3
 800021e:	d114      	bne.n	800024a <display7SEG+0xfe>
		HAL_GPIO_TogglePin ( SEG0_GPIO_Port , SEG0_Pin ) ;
 8000220:	2101      	movs	r1, #1
 8000222:	4853      	ldr	r0, [pc, #332]	; (8000370 <display7SEG+0x224>)
 8000224:	f001 fa0a 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG1_GPIO_Port , SEG1_Pin ) ;
 8000228:	2102      	movs	r1, #2
 800022a:	4851      	ldr	r0, [pc, #324]	; (8000370 <display7SEG+0x224>)
 800022c:	f001 fa06 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG2_GPIO_Port , SEG2_Pin ) ;
 8000230:	2104      	movs	r1, #4
 8000232:	484f      	ldr	r0, [pc, #316]	; (8000370 <display7SEG+0x224>)
 8000234:	f001 fa02 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG3_GPIO_Port , SEG3_Pin ) ;
 8000238:	2108      	movs	r1, #8
 800023a:	484d      	ldr	r0, [pc, #308]	; (8000370 <display7SEG+0x224>)
 800023c:	f001 f9fe 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG6_GPIO_Port , SEG6_Pin ) ;
 8000240:	2140      	movs	r1, #64	; 0x40
 8000242:	484b      	ldr	r0, [pc, #300]	; (8000370 <display7SEG+0x224>)
 8000244:	f001 f9fa 	bl	800163c <HAL_GPIO_TogglePin>
}
 8000248:	e08e      	b.n	8000368 <display7SEG+0x21c>
	else if (num == 4){
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2b04      	cmp	r3, #4
 800024e:	d110      	bne.n	8000272 <display7SEG+0x126>
		HAL_GPIO_TogglePin ( SEG1_GPIO_Port , SEG1_Pin ) ;
 8000250:	2102      	movs	r1, #2
 8000252:	4847      	ldr	r0, [pc, #284]	; (8000370 <display7SEG+0x224>)
 8000254:	f001 f9f2 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG2_GPIO_Port , SEG2_Pin ) ;
 8000258:	2104      	movs	r1, #4
 800025a:	4845      	ldr	r0, [pc, #276]	; (8000370 <display7SEG+0x224>)
 800025c:	f001 f9ee 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG5_GPIO_Port , SEG5_Pin ) ;
 8000260:	2120      	movs	r1, #32
 8000262:	4843      	ldr	r0, [pc, #268]	; (8000370 <display7SEG+0x224>)
 8000264:	f001 f9ea 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG6_GPIO_Port , SEG6_Pin ) ;
 8000268:	2140      	movs	r1, #64	; 0x40
 800026a:	4841      	ldr	r0, [pc, #260]	; (8000370 <display7SEG+0x224>)
 800026c:	f001 f9e6 	bl	800163c <HAL_GPIO_TogglePin>
}
 8000270:	e07a      	b.n	8000368 <display7SEG+0x21c>
	else if (num == 5){
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2b05      	cmp	r3, #5
 8000276:	d114      	bne.n	80002a2 <display7SEG+0x156>
		HAL_GPIO_TogglePin ( SEG0_GPIO_Port , SEG0_Pin ) ;
 8000278:	2101      	movs	r1, #1
 800027a:	483d      	ldr	r0, [pc, #244]	; (8000370 <display7SEG+0x224>)
 800027c:	f001 f9de 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG2_GPIO_Port , SEG2_Pin ) ;
 8000280:	2104      	movs	r1, #4
 8000282:	483b      	ldr	r0, [pc, #236]	; (8000370 <display7SEG+0x224>)
 8000284:	f001 f9da 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG3_GPIO_Port , SEG3_Pin ) ;
 8000288:	2108      	movs	r1, #8
 800028a:	4839      	ldr	r0, [pc, #228]	; (8000370 <display7SEG+0x224>)
 800028c:	f001 f9d6 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG5_GPIO_Port , SEG5_Pin ) ;
 8000290:	2120      	movs	r1, #32
 8000292:	4837      	ldr	r0, [pc, #220]	; (8000370 <display7SEG+0x224>)
 8000294:	f001 f9d2 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG6_GPIO_Port , SEG6_Pin ) ;
 8000298:	2140      	movs	r1, #64	; 0x40
 800029a:	4835      	ldr	r0, [pc, #212]	; (8000370 <display7SEG+0x224>)
 800029c:	f001 f9ce 	bl	800163c <HAL_GPIO_TogglePin>
}
 80002a0:	e062      	b.n	8000368 <display7SEG+0x21c>
	else if (num == 6){
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2b06      	cmp	r3, #6
 80002a6:	d118      	bne.n	80002da <display7SEG+0x18e>
		HAL_GPIO_TogglePin ( SEG0_GPIO_Port , SEG0_Pin ) ;
 80002a8:	2101      	movs	r1, #1
 80002aa:	4831      	ldr	r0, [pc, #196]	; (8000370 <display7SEG+0x224>)
 80002ac:	f001 f9c6 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG2_GPIO_Port , SEG2_Pin ) ;
 80002b0:	2104      	movs	r1, #4
 80002b2:	482f      	ldr	r0, [pc, #188]	; (8000370 <display7SEG+0x224>)
 80002b4:	f001 f9c2 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG3_GPIO_Port , SEG3_Pin ) ;
 80002b8:	2108      	movs	r1, #8
 80002ba:	482d      	ldr	r0, [pc, #180]	; (8000370 <display7SEG+0x224>)
 80002bc:	f001 f9be 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG4_GPIO_Port , SEG4_Pin ) ;
 80002c0:	2110      	movs	r1, #16
 80002c2:	482b      	ldr	r0, [pc, #172]	; (8000370 <display7SEG+0x224>)
 80002c4:	f001 f9ba 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG5_GPIO_Port , SEG5_Pin ) ;
 80002c8:	2120      	movs	r1, #32
 80002ca:	4829      	ldr	r0, [pc, #164]	; (8000370 <display7SEG+0x224>)
 80002cc:	f001 f9b6 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG6_GPIO_Port , SEG6_Pin ) ;
 80002d0:	2140      	movs	r1, #64	; 0x40
 80002d2:	4827      	ldr	r0, [pc, #156]	; (8000370 <display7SEG+0x224>)
 80002d4:	f001 f9b2 	bl	800163c <HAL_GPIO_TogglePin>
}
 80002d8:	e046      	b.n	8000368 <display7SEG+0x21c>
	else if (num == 7){
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2b07      	cmp	r3, #7
 80002de:	d10c      	bne.n	80002fa <display7SEG+0x1ae>
		HAL_GPIO_TogglePin ( SEG0_GPIO_Port , SEG0_Pin ) ;
 80002e0:	2101      	movs	r1, #1
 80002e2:	4823      	ldr	r0, [pc, #140]	; (8000370 <display7SEG+0x224>)
 80002e4:	f001 f9aa 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG1_GPIO_Port , SEG1_Pin ) ;
 80002e8:	2102      	movs	r1, #2
 80002ea:	4821      	ldr	r0, [pc, #132]	; (8000370 <display7SEG+0x224>)
 80002ec:	f001 f9a6 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG2_GPIO_Port , SEG2_Pin ) ;
 80002f0:	2104      	movs	r1, #4
 80002f2:	481f      	ldr	r0, [pc, #124]	; (8000370 <display7SEG+0x224>)
 80002f4:	f001 f9a2 	bl	800163c <HAL_GPIO_TogglePin>
}
 80002f8:	e036      	b.n	8000368 <display7SEG+0x21c>
	else if (num == 8){
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b08      	cmp	r3, #8
 80002fe:	d11c      	bne.n	800033a <display7SEG+0x1ee>
		HAL_GPIO_TogglePin ( SEG0_GPIO_Port , SEG0_Pin ) ;
 8000300:	2101      	movs	r1, #1
 8000302:	481b      	ldr	r0, [pc, #108]	; (8000370 <display7SEG+0x224>)
 8000304:	f001 f99a 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG1_GPIO_Port , SEG1_Pin ) ;
 8000308:	2102      	movs	r1, #2
 800030a:	4819      	ldr	r0, [pc, #100]	; (8000370 <display7SEG+0x224>)
 800030c:	f001 f996 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG2_GPIO_Port , SEG2_Pin ) ;
 8000310:	2104      	movs	r1, #4
 8000312:	4817      	ldr	r0, [pc, #92]	; (8000370 <display7SEG+0x224>)
 8000314:	f001 f992 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG3_GPIO_Port , SEG3_Pin ) ;
 8000318:	2108      	movs	r1, #8
 800031a:	4815      	ldr	r0, [pc, #84]	; (8000370 <display7SEG+0x224>)
 800031c:	f001 f98e 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG4_GPIO_Port , SEG4_Pin ) ;
 8000320:	2110      	movs	r1, #16
 8000322:	4813      	ldr	r0, [pc, #76]	; (8000370 <display7SEG+0x224>)
 8000324:	f001 f98a 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG5_GPIO_Port , SEG5_Pin ) ;
 8000328:	2120      	movs	r1, #32
 800032a:	4811      	ldr	r0, [pc, #68]	; (8000370 <display7SEG+0x224>)
 800032c:	f001 f986 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG6_GPIO_Port , SEG6_Pin ) ;
 8000330:	2140      	movs	r1, #64	; 0x40
 8000332:	480f      	ldr	r0, [pc, #60]	; (8000370 <display7SEG+0x224>)
 8000334:	f001 f982 	bl	800163c <HAL_GPIO_TogglePin>
}
 8000338:	e016      	b.n	8000368 <display7SEG+0x21c>
	else if (num == 9){
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2b09      	cmp	r3, #9
 800033e:	d113      	bne.n	8000368 <display7SEG+0x21c>
		HAL_GPIO_TogglePin ( SEG0_GPIO_Port , SEG0_Pin ) ;
 8000340:	2101      	movs	r1, #1
 8000342:	480b      	ldr	r0, [pc, #44]	; (8000370 <display7SEG+0x224>)
 8000344:	f001 f97a 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG1_GPIO_Port , SEG1_Pin ) ;
 8000348:	2102      	movs	r1, #2
 800034a:	4809      	ldr	r0, [pc, #36]	; (8000370 <display7SEG+0x224>)
 800034c:	f001 f976 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG2_GPIO_Port , SEG2_Pin ) ;
 8000350:	2104      	movs	r1, #4
 8000352:	4807      	ldr	r0, [pc, #28]	; (8000370 <display7SEG+0x224>)
 8000354:	f001 f972 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG5_GPIO_Port , SEG5_Pin ) ;
 8000358:	2120      	movs	r1, #32
 800035a:	4805      	ldr	r0, [pc, #20]	; (8000370 <display7SEG+0x224>)
 800035c:	f001 f96e 	bl	800163c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin ( SEG6_GPIO_Port , SEG6_Pin ) ;
 8000360:	2140      	movs	r1, #64	; 0x40
 8000362:	4803      	ldr	r0, [pc, #12]	; (8000370 <display7SEG+0x224>)
 8000364:	f001 f96a 	bl	800163c <HAL_GPIO_TogglePin>
}
 8000368:	bf00      	nop
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40010c00 	.word	0x40010c00

08000374 <display8x8Mat>:

void display8x8Mat(char one[]){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin ( ROW0_GPIO_Port , ROW0_Pin,GPIO_PIN_SET ) ;
 800037c:	2201      	movs	r2, #1
 800037e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000382:	489f      	ldr	r0, [pc, #636]	; (8000600 <display8x8Mat+0x28c>)
 8000384:	f001 f942 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( ROW1_GPIO_Port , ROW1_Pin,GPIO_PIN_SET ) ;
 8000388:	2201      	movs	r2, #1
 800038a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800038e:	489c      	ldr	r0, [pc, #624]	; (8000600 <display8x8Mat+0x28c>)
 8000390:	f001 f93c 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( ROW2_GPIO_Port , ROW2_Pin,GPIO_PIN_SET ) ;
 8000394:	2201      	movs	r2, #1
 8000396:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800039a:	4899      	ldr	r0, [pc, #612]	; (8000600 <display8x8Mat+0x28c>)
 800039c:	f001 f936 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( ROW3_GPIO_Port , ROW3_Pin,GPIO_PIN_SET ) ;
 80003a0:	2201      	movs	r2, #1
 80003a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003a6:	4896      	ldr	r0, [pc, #600]	; (8000600 <display8x8Mat+0x28c>)
 80003a8:	f001 f930 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( ROW4_GPIO_Port , ROW4_Pin,GPIO_PIN_SET ) ;
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003b2:	4893      	ldr	r0, [pc, #588]	; (8000600 <display8x8Mat+0x28c>)
 80003b4:	f001 f92a 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( ROW5_GPIO_Port , ROW5_Pin,GPIO_PIN_SET ) ;
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003be:	4890      	ldr	r0, [pc, #576]	; (8000600 <display8x8Mat+0x28c>)
 80003c0:	f001 f924 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( ROW6_GPIO_Port , ROW6_Pin,GPIO_PIN_SET ) ;
 80003c4:	2201      	movs	r2, #1
 80003c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ca:	488d      	ldr	r0, [pc, #564]	; (8000600 <display8x8Mat+0x28c>)
 80003cc:	f001 f91e 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( ROW7_GPIO_Port , ROW7_Pin,GPIO_PIN_SET ) ;
 80003d0:	2201      	movs	r2, #1
 80003d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003d6:	488a      	ldr	r0, [pc, #552]	; (8000600 <display8x8Mat+0x28c>)
 80003d8:	f001 f918 	bl	800160c <HAL_GPIO_WritePin>
	switch(one[3])
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3303      	adds	r3, #3
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	3b30      	subs	r3, #48	; 0x30
 80003e4:	2b36      	cmp	r3, #54	; 0x36
 80003e6:	f200 8122 	bhi.w	800062e <display8x8Mat+0x2ba>
 80003ea:	a201      	add	r2, pc, #4	; (adr r2, 80003f0 <display8x8Mat+0x7c>)
 80003ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f0:	0800062f 	.word	0x0800062f
 80003f4:	080004cd 	.word	0x080004cd
 80003f8:	080004d9 	.word	0x080004d9
 80003fc:	080004e5 	.word	0x080004e5
 8000400:	080004fb 	.word	0x080004fb
 8000404:	08000507 	.word	0x08000507
 8000408:	0800051d 	.word	0x0800051d
 800040c:	08000533 	.word	0x08000533
 8000410:	08000553 	.word	0x08000553
 8000414:	0800055f 	.word	0x0800055f
 8000418:	0800062f 	.word	0x0800062f
 800041c:	0800062f 	.word	0x0800062f
 8000420:	0800062f 	.word	0x0800062f
 8000424:	0800062f 	.word	0x0800062f
 8000428:	0800062f 	.word	0x0800062f
 800042c:	0800062f 	.word	0x0800062f
 8000430:	0800062f 	.word	0x0800062f
 8000434:	08000575 	.word	0x08000575
 8000438:	0800058b 	.word	0x0800058b
 800043c:	080005ab 	.word	0x080005ab
 8000440:	080005c1 	.word	0x080005c1
 8000444:	080005e1 	.word	0x080005e1
 8000448:	08000605 	.word	0x08000605
 800044c:	0800062f 	.word	0x0800062f
 8000450:	0800062f 	.word	0x0800062f
 8000454:	0800062f 	.word	0x0800062f
 8000458:	0800062f 	.word	0x0800062f
 800045c:	0800062f 	.word	0x0800062f
 8000460:	0800062f 	.word	0x0800062f
 8000464:	0800062f 	.word	0x0800062f
 8000468:	0800062f 	.word	0x0800062f
 800046c:	0800062f 	.word	0x0800062f
 8000470:	0800062f 	.word	0x0800062f
 8000474:	0800062f 	.word	0x0800062f
 8000478:	0800062f 	.word	0x0800062f
 800047c:	0800062f 	.word	0x0800062f
 8000480:	0800062f 	.word	0x0800062f
 8000484:	0800062f 	.word	0x0800062f
 8000488:	0800062f 	.word	0x0800062f
 800048c:	0800062f 	.word	0x0800062f
 8000490:	0800062f 	.word	0x0800062f
 8000494:	0800062f 	.word	0x0800062f
 8000498:	0800062f 	.word	0x0800062f
 800049c:	0800062f 	.word	0x0800062f
 80004a0:	0800062f 	.word	0x0800062f
 80004a4:	0800062f 	.word	0x0800062f
 80004a8:	0800062f 	.word	0x0800062f
 80004ac:	0800062f 	.word	0x0800062f
 80004b0:	0800062f 	.word	0x0800062f
 80004b4:	08000575 	.word	0x08000575
 80004b8:	0800058b 	.word	0x0800058b
 80004bc:	080005ab 	.word	0x080005ab
 80004c0:	080005c1 	.word	0x080005c1
 80004c4:	080005e1 	.word	0x080005e1
 80004c8:	08000605 	.word	0x08000605
	        {
	            case '0':
	                break;
	            case '1':
	            	HAL_GPIO_TogglePin ( ROW7_GPIO_Port , ROW7_Pin ) ;
 80004cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004d0:	484b      	ldr	r0, [pc, #300]	; (8000600 <display8x8Mat+0x28c>)
 80004d2:	f001 f8b3 	bl	800163c <HAL_GPIO_TogglePin>
	                break;
 80004d6:	e0aa      	b.n	800062e <display8x8Mat+0x2ba>
	            case '2':
	            	HAL_GPIO_TogglePin ( ROW6_GPIO_Port , ROW6_Pin ) ;
 80004d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004dc:	4848      	ldr	r0, [pc, #288]	; (8000600 <display8x8Mat+0x28c>)
 80004de:	f001 f8ad 	bl	800163c <HAL_GPIO_TogglePin>
	                break;
 80004e2:	e0a4      	b.n	800062e <display8x8Mat+0x2ba>
	            case '3':
	            	HAL_GPIO_TogglePin ( ROW6_GPIO_Port , ROW6_Pin ) ;
 80004e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e8:	4845      	ldr	r0, [pc, #276]	; (8000600 <display8x8Mat+0x28c>)
 80004ea:	f001 f8a7 	bl	800163c <HAL_GPIO_TogglePin>
	            	HAL_GPIO_TogglePin ( ROW7_GPIO_Port , ROW7_Pin ) ;
 80004ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004f2:	4843      	ldr	r0, [pc, #268]	; (8000600 <display8x8Mat+0x28c>)
 80004f4:	f001 f8a2 	bl	800163c <HAL_GPIO_TogglePin>
	                break;
 80004f8:	e099      	b.n	800062e <display8x8Mat+0x2ba>
	            case '4':
	            	HAL_GPIO_TogglePin ( ROW5_GPIO_Port , ROW5_Pin ) ;
 80004fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fe:	4840      	ldr	r0, [pc, #256]	; (8000600 <display8x8Mat+0x28c>)
 8000500:	f001 f89c 	bl	800163c <HAL_GPIO_TogglePin>
	                break;
 8000504:	e093      	b.n	800062e <display8x8Mat+0x2ba>
	            case '5':
	            	HAL_GPIO_TogglePin ( ROW5_GPIO_Port , ROW5_Pin ) ;
 8000506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050a:	483d      	ldr	r0, [pc, #244]	; (8000600 <display8x8Mat+0x28c>)
 800050c:	f001 f896 	bl	800163c <HAL_GPIO_TogglePin>
	            	HAL_GPIO_TogglePin ( ROW7_GPIO_Port , ROW7_Pin ) ;
 8000510:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000514:	483a      	ldr	r0, [pc, #232]	; (8000600 <display8x8Mat+0x28c>)
 8000516:	f001 f891 	bl	800163c <HAL_GPIO_TogglePin>
	                break;
 800051a:	e088      	b.n	800062e <display8x8Mat+0x2ba>
	            case '6':
	            	HAL_GPIO_TogglePin ( ROW5_GPIO_Port , ROW5_Pin ) ;
 800051c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000520:	4837      	ldr	r0, [pc, #220]	; (8000600 <display8x8Mat+0x28c>)
 8000522:	f001 f88b 	bl	800163c <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin ( ROW6_GPIO_Port , ROW6_Pin ) ;
 8000526:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800052a:	4835      	ldr	r0, [pc, #212]	; (8000600 <display8x8Mat+0x28c>)
 800052c:	f001 f886 	bl	800163c <HAL_GPIO_TogglePin>
	                break;
 8000530:	e07d      	b.n	800062e <display8x8Mat+0x2ba>
	            case '7':
	            	HAL_GPIO_TogglePin ( ROW5_GPIO_Port , ROW5_Pin ) ;
 8000532:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000536:	4832      	ldr	r0, [pc, #200]	; (8000600 <display8x8Mat+0x28c>)
 8000538:	f001 f880 	bl	800163c <HAL_GPIO_TogglePin>
	            	HAL_GPIO_TogglePin ( ROW6_GPIO_Port , ROW6_Pin ) ;
 800053c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000540:	482f      	ldr	r0, [pc, #188]	; (8000600 <display8x8Mat+0x28c>)
 8000542:	f001 f87b 	bl	800163c <HAL_GPIO_TogglePin>
	            	HAL_GPIO_TogglePin ( ROW7_GPIO_Port , ROW7_Pin ) ;
 8000546:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800054a:	482d      	ldr	r0, [pc, #180]	; (8000600 <display8x8Mat+0x28c>)
 800054c:	f001 f876 	bl	800163c <HAL_GPIO_TogglePin>
	                break;
 8000550:	e06d      	b.n	800062e <display8x8Mat+0x2ba>
	            case '8':
	            	HAL_GPIO_TogglePin ( ROW4_GPIO_Port , ROW4_Pin ) ;
 8000552:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000556:	482a      	ldr	r0, [pc, #168]	; (8000600 <display8x8Mat+0x28c>)
 8000558:	f001 f870 	bl	800163c <HAL_GPIO_TogglePin>
	                break;
 800055c:	e067      	b.n	800062e <display8x8Mat+0x2ba>
	            case '9':
	            	HAL_GPIO_TogglePin ( ROW4_GPIO_Port , ROW4_Pin ) ;
 800055e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000562:	4827      	ldr	r0, [pc, #156]	; (8000600 <display8x8Mat+0x28c>)
 8000564:	f001 f86a 	bl	800163c <HAL_GPIO_TogglePin>
	            	HAL_GPIO_TogglePin ( ROW7_GPIO_Port , ROW7_Pin ) ;
 8000568:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800056c:	4824      	ldr	r0, [pc, #144]	; (8000600 <display8x8Mat+0x28c>)
 800056e:	f001 f865 	bl	800163c <HAL_GPIO_TogglePin>
	                break;
 8000572:	e05c      	b.n	800062e <display8x8Mat+0x2ba>
	            case 'A':
	            case 'a':
	            	HAL_GPIO_TogglePin ( ROW4_GPIO_Port , ROW4_Pin ) ;
 8000574:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000578:	4821      	ldr	r0, [pc, #132]	; (8000600 <display8x8Mat+0x28c>)
 800057a:	f001 f85f 	bl	800163c <HAL_GPIO_TogglePin>
	            	HAL_GPIO_TogglePin ( ROW6_GPIO_Port , ROW6_Pin ) ;
 800057e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000582:	481f      	ldr	r0, [pc, #124]	; (8000600 <display8x8Mat+0x28c>)
 8000584:	f001 f85a 	bl	800163c <HAL_GPIO_TogglePin>
	                break;
 8000588:	e051      	b.n	800062e <display8x8Mat+0x2ba>
	            case 'B':
	            case 'b':
	            	HAL_GPIO_TogglePin ( ROW4_GPIO_Port , ROW4_Pin ) ;
 800058a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058e:	481c      	ldr	r0, [pc, #112]	; (8000600 <display8x8Mat+0x28c>)
 8000590:	f001 f854 	bl	800163c <HAL_GPIO_TogglePin>
	            	HAL_GPIO_TogglePin ( ROW6_GPIO_Port , ROW6_Pin ) ;
 8000594:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000598:	4819      	ldr	r0, [pc, #100]	; (8000600 <display8x8Mat+0x28c>)
 800059a:	f001 f84f 	bl	800163c <HAL_GPIO_TogglePin>
	            	HAL_GPIO_TogglePin ( ROW7_GPIO_Port , ROW7_Pin ) ;
 800059e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a2:	4817      	ldr	r0, [pc, #92]	; (8000600 <display8x8Mat+0x28c>)
 80005a4:	f001 f84a 	bl	800163c <HAL_GPIO_TogglePin>
	                break;
 80005a8:	e041      	b.n	800062e <display8x8Mat+0x2ba>
	            case 'C':
	            case 'c':
	            	HAL_GPIO_TogglePin ( ROW4_GPIO_Port , ROW4_Pin ) ;
 80005aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ae:	4814      	ldr	r0, [pc, #80]	; (8000600 <display8x8Mat+0x28c>)
 80005b0:	f001 f844 	bl	800163c <HAL_GPIO_TogglePin>
	            	HAL_GPIO_TogglePin ( ROW5_GPIO_Port , ROW5_Pin ) ;
 80005b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b8:	4811      	ldr	r0, [pc, #68]	; (8000600 <display8x8Mat+0x28c>)
 80005ba:	f001 f83f 	bl	800163c <HAL_GPIO_TogglePin>
	                break;
 80005be:	e036      	b.n	800062e <display8x8Mat+0x2ba>
	            case 'D':
	            case 'd':
	            	HAL_GPIO_TogglePin ( ROW4_GPIO_Port , ROW4_Pin ) ;
 80005c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c4:	480e      	ldr	r0, [pc, #56]	; (8000600 <display8x8Mat+0x28c>)
 80005c6:	f001 f839 	bl	800163c <HAL_GPIO_TogglePin>
	            	HAL_GPIO_TogglePin ( ROW5_GPIO_Port , ROW5_Pin ) ;
 80005ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ce:	480c      	ldr	r0, [pc, #48]	; (8000600 <display8x8Mat+0x28c>)
 80005d0:	f001 f834 	bl	800163c <HAL_GPIO_TogglePin>
	            	HAL_GPIO_TogglePin ( ROW7_GPIO_Port , ROW7_Pin ) ;
 80005d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <display8x8Mat+0x28c>)
 80005da:	f001 f82f 	bl	800163c <HAL_GPIO_TogglePin>
	                break;
 80005de:	e026      	b.n	800062e <display8x8Mat+0x2ba>
	            case 'E':
	            case 'e':
	            	HAL_GPIO_TogglePin ( ROW4_GPIO_Port , ROW4_Pin ) ;
 80005e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e4:	4806      	ldr	r0, [pc, #24]	; (8000600 <display8x8Mat+0x28c>)
 80005e6:	f001 f829 	bl	800163c <HAL_GPIO_TogglePin>
	            	HAL_GPIO_TogglePin ( ROW5_GPIO_Port , ROW5_Pin ) ;
 80005ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <display8x8Mat+0x28c>)
 80005f0:	f001 f824 	bl	800163c <HAL_GPIO_TogglePin>
	            	HAL_GPIO_TogglePin ( ROW6_GPIO_Port , ROW6_Pin ) ;
 80005f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f8:	4801      	ldr	r0, [pc, #4]	; (8000600 <display8x8Mat+0x28c>)
 80005fa:	f001 f81f 	bl	800163c <HAL_GPIO_TogglePin>
	                break;
 80005fe:	e016      	b.n	800062e <display8x8Mat+0x2ba>
 8000600:	40010c00 	.word	0x40010c00
	            case 'F':
	            case 'f':
	            	HAL_GPIO_TogglePin ( ROW4_GPIO_Port , ROW4_Pin ) ;
 8000604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000608:	489f      	ldr	r0, [pc, #636]	; (8000888 <display8x8Mat+0x514>)
 800060a:	f001 f817 	bl	800163c <HAL_GPIO_TogglePin>
	            	HAL_GPIO_TogglePin ( ROW5_GPIO_Port , ROW5_Pin ) ;
 800060e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000612:	489d      	ldr	r0, [pc, #628]	; (8000888 <display8x8Mat+0x514>)
 8000614:	f001 f812 	bl	800163c <HAL_GPIO_TogglePin>
	            	HAL_GPIO_TogglePin ( ROW6_GPIO_Port , ROW6_Pin ) ;
 8000618:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061c:	489a      	ldr	r0, [pc, #616]	; (8000888 <display8x8Mat+0x514>)
 800061e:	f001 f80d 	bl	800163c <HAL_GPIO_TogglePin>
	            	HAL_GPIO_TogglePin ( ROW7_GPIO_Port , ROW7_Pin ) ;
 8000622:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000626:	4898      	ldr	r0, [pc, #608]	; (8000888 <display8x8Mat+0x514>)
 8000628:	f001 f808 	bl	800163c <HAL_GPIO_TogglePin>
	                break;
 800062c:	bf00      	nop
	        }
	switch(one[2])
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3302      	adds	r3, #2
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	3b30      	subs	r3, #48	; 0x30
 8000636:	2b36      	cmp	r3, #54	; 0x36
 8000638:	f200 8122 	bhi.w	8000880 <display8x8Mat+0x50c>
 800063c:	a201      	add	r2, pc, #4	; (adr r2, 8000644 <display8x8Mat+0x2d0>)
 800063e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000642:	bf00      	nop
 8000644:	0800087f 	.word	0x0800087f
 8000648:	08000721 	.word	0x08000721
 800064c:	0800072d 	.word	0x0800072d
 8000650:	08000739 	.word	0x08000739
 8000654:	0800074f 	.word	0x0800074f
 8000658:	0800075b 	.word	0x0800075b
 800065c:	08000771 	.word	0x08000771
 8000660:	08000787 	.word	0x08000787
 8000664:	080007a7 	.word	0x080007a7
 8000668:	080007b3 	.word	0x080007b3
 800066c:	08000881 	.word	0x08000881
 8000670:	08000881 	.word	0x08000881
 8000674:	08000881 	.word	0x08000881
 8000678:	08000881 	.word	0x08000881
 800067c:	08000881 	.word	0x08000881
 8000680:	08000881 	.word	0x08000881
 8000684:	08000881 	.word	0x08000881
 8000688:	080007c9 	.word	0x080007c9
 800068c:	080007df 	.word	0x080007df
 8000690:	080007ff 	.word	0x080007ff
 8000694:	08000815 	.word	0x08000815
 8000698:	08000835 	.word	0x08000835
 800069c:	08000855 	.word	0x08000855
 80006a0:	08000881 	.word	0x08000881
 80006a4:	08000881 	.word	0x08000881
 80006a8:	08000881 	.word	0x08000881
 80006ac:	08000881 	.word	0x08000881
 80006b0:	08000881 	.word	0x08000881
 80006b4:	08000881 	.word	0x08000881
 80006b8:	08000881 	.word	0x08000881
 80006bc:	08000881 	.word	0x08000881
 80006c0:	08000881 	.word	0x08000881
 80006c4:	08000881 	.word	0x08000881
 80006c8:	08000881 	.word	0x08000881
 80006cc:	08000881 	.word	0x08000881
 80006d0:	08000881 	.word	0x08000881
 80006d4:	08000881 	.word	0x08000881
 80006d8:	08000881 	.word	0x08000881
 80006dc:	08000881 	.word	0x08000881
 80006e0:	08000881 	.word	0x08000881
 80006e4:	08000881 	.word	0x08000881
 80006e8:	08000881 	.word	0x08000881
 80006ec:	08000881 	.word	0x08000881
 80006f0:	08000881 	.word	0x08000881
 80006f4:	08000881 	.word	0x08000881
 80006f8:	08000881 	.word	0x08000881
 80006fc:	08000881 	.word	0x08000881
 8000700:	08000881 	.word	0x08000881
 8000704:	08000881 	.word	0x08000881
 8000708:	080007c9 	.word	0x080007c9
 800070c:	080007df 	.word	0x080007df
 8000710:	080007ff 	.word	0x080007ff
 8000714:	08000815 	.word	0x08000815
 8000718:	08000835 	.word	0x08000835
 800071c:	08000855 	.word	0x08000855
		        {
		            case '0':
		                break;
		            case '1':
		            	HAL_GPIO_TogglePin ( ROW3_GPIO_Port , ROW3_Pin ) ;
 8000720:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000724:	4858      	ldr	r0, [pc, #352]	; (8000888 <display8x8Mat+0x514>)
 8000726:	f000 ff89 	bl	800163c <HAL_GPIO_TogglePin>
		                break;
 800072a:	e0a9      	b.n	8000880 <display8x8Mat+0x50c>
		            case '2':
		            	HAL_GPIO_TogglePin ( ROW2_GPIO_Port , ROW2_Pin ) ;
 800072c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000730:	4855      	ldr	r0, [pc, #340]	; (8000888 <display8x8Mat+0x514>)
 8000732:	f000 ff83 	bl	800163c <HAL_GPIO_TogglePin>
		                break;
 8000736:	e0a3      	b.n	8000880 <display8x8Mat+0x50c>
		            case '3':
		            	HAL_GPIO_TogglePin ( ROW2_GPIO_Port , ROW2_Pin ) ;
 8000738:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073c:	4852      	ldr	r0, [pc, #328]	; (8000888 <display8x8Mat+0x514>)
 800073e:	f000 ff7d 	bl	800163c <HAL_GPIO_TogglePin>
		            	HAL_GPIO_TogglePin ( ROW3_GPIO_Port , ROW3_Pin ) ;
 8000742:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000746:	4850      	ldr	r0, [pc, #320]	; (8000888 <display8x8Mat+0x514>)
 8000748:	f000 ff78 	bl	800163c <HAL_GPIO_TogglePin>
		                break;
 800074c:	e098      	b.n	8000880 <display8x8Mat+0x50c>
		            case '4':
		            	HAL_GPIO_TogglePin ( ROW1_GPIO_Port , ROW1_Pin ) ;
 800074e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000752:	484d      	ldr	r0, [pc, #308]	; (8000888 <display8x8Mat+0x514>)
 8000754:	f000 ff72 	bl	800163c <HAL_GPIO_TogglePin>
		                break;
 8000758:	e092      	b.n	8000880 <display8x8Mat+0x50c>
		            case '5':
		            	HAL_GPIO_TogglePin ( ROW1_GPIO_Port , ROW1_Pin ) ;
 800075a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800075e:	484a      	ldr	r0, [pc, #296]	; (8000888 <display8x8Mat+0x514>)
 8000760:	f000 ff6c 	bl	800163c <HAL_GPIO_TogglePin>
		            	HAL_GPIO_TogglePin ( ROW3_GPIO_Port , ROW3_Pin ) ;
 8000764:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000768:	4847      	ldr	r0, [pc, #284]	; (8000888 <display8x8Mat+0x514>)
 800076a:	f000 ff67 	bl	800163c <HAL_GPIO_TogglePin>
		                break;
 800076e:	e087      	b.n	8000880 <display8x8Mat+0x50c>
		            case '6':
		            	HAL_GPIO_TogglePin ( ROW1_GPIO_Port , ROW1_Pin ) ;
 8000770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000774:	4844      	ldr	r0, [pc, #272]	; (8000888 <display8x8Mat+0x514>)
 8000776:	f000 ff61 	bl	800163c <HAL_GPIO_TogglePin>
						HAL_GPIO_TogglePin ( ROW2_GPIO_Port , ROW2_Pin ) ;
 800077a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800077e:	4842      	ldr	r0, [pc, #264]	; (8000888 <display8x8Mat+0x514>)
 8000780:	f000 ff5c 	bl	800163c <HAL_GPIO_TogglePin>
		                break;
 8000784:	e07c      	b.n	8000880 <display8x8Mat+0x50c>
		            case '7':
		            	HAL_GPIO_TogglePin ( ROW1_GPIO_Port , ROW1_Pin ) ;
 8000786:	f44f 7100 	mov.w	r1, #512	; 0x200
 800078a:	483f      	ldr	r0, [pc, #252]	; (8000888 <display8x8Mat+0x514>)
 800078c:	f000 ff56 	bl	800163c <HAL_GPIO_TogglePin>
		            	HAL_GPIO_TogglePin ( ROW2_GPIO_Port , ROW2_Pin ) ;
 8000790:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000794:	483c      	ldr	r0, [pc, #240]	; (8000888 <display8x8Mat+0x514>)
 8000796:	f000 ff51 	bl	800163c <HAL_GPIO_TogglePin>
		            	HAL_GPIO_TogglePin ( ROW3_GPIO_Port , ROW3_Pin ) ;
 800079a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800079e:	483a      	ldr	r0, [pc, #232]	; (8000888 <display8x8Mat+0x514>)
 80007a0:	f000 ff4c 	bl	800163c <HAL_GPIO_TogglePin>
		                break;
 80007a4:	e06c      	b.n	8000880 <display8x8Mat+0x50c>
		            case '8':
		            	HAL_GPIO_TogglePin ( ROW0_GPIO_Port , ROW0_Pin ) ;
 80007a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007aa:	4837      	ldr	r0, [pc, #220]	; (8000888 <display8x8Mat+0x514>)
 80007ac:	f000 ff46 	bl	800163c <HAL_GPIO_TogglePin>
		                break;
 80007b0:	e066      	b.n	8000880 <display8x8Mat+0x50c>
		            case '9':
		            	HAL_GPIO_TogglePin ( ROW0_GPIO_Port , ROW0_Pin ) ;
 80007b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b6:	4834      	ldr	r0, [pc, #208]	; (8000888 <display8x8Mat+0x514>)
 80007b8:	f000 ff40 	bl	800163c <HAL_GPIO_TogglePin>
		            	HAL_GPIO_TogglePin ( ROW3_GPIO_Port , ROW3_Pin ) ;
 80007bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c0:	4831      	ldr	r0, [pc, #196]	; (8000888 <display8x8Mat+0x514>)
 80007c2:	f000 ff3b 	bl	800163c <HAL_GPIO_TogglePin>
		                break;
 80007c6:	e05b      	b.n	8000880 <display8x8Mat+0x50c>
		            case 'A':
		            case 'a':
		            	HAL_GPIO_TogglePin ( ROW0_GPIO_Port , ROW0_Pin ) ;
 80007c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007cc:	482e      	ldr	r0, [pc, #184]	; (8000888 <display8x8Mat+0x514>)
 80007ce:	f000 ff35 	bl	800163c <HAL_GPIO_TogglePin>
		            	HAL_GPIO_TogglePin ( ROW2_GPIO_Port , ROW2_Pin ) ;
 80007d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d6:	482c      	ldr	r0, [pc, #176]	; (8000888 <display8x8Mat+0x514>)
 80007d8:	f000 ff30 	bl	800163c <HAL_GPIO_TogglePin>
		                break;
 80007dc:	e050      	b.n	8000880 <display8x8Mat+0x50c>
		            case 'B':
		            case 'b':
		            	HAL_GPIO_TogglePin ( ROW0_GPIO_Port , ROW0_Pin ) ;
 80007de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e2:	4829      	ldr	r0, [pc, #164]	; (8000888 <display8x8Mat+0x514>)
 80007e4:	f000 ff2a 	bl	800163c <HAL_GPIO_TogglePin>
		            	HAL_GPIO_TogglePin ( ROW2_GPIO_Port , ROW2_Pin ) ;
 80007e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ec:	4826      	ldr	r0, [pc, #152]	; (8000888 <display8x8Mat+0x514>)
 80007ee:	f000 ff25 	bl	800163c <HAL_GPIO_TogglePin>
		            	HAL_GPIO_TogglePin ( ROW3_GPIO_Port , ROW3_Pin ) ;
 80007f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f6:	4824      	ldr	r0, [pc, #144]	; (8000888 <display8x8Mat+0x514>)
 80007f8:	f000 ff20 	bl	800163c <HAL_GPIO_TogglePin>
		                break;
 80007fc:	e040      	b.n	8000880 <display8x8Mat+0x50c>
		            case 'C':
		            case 'c':
		            	HAL_GPIO_TogglePin ( ROW0_GPIO_Port , ROW0_Pin ) ;
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	4821      	ldr	r0, [pc, #132]	; (8000888 <display8x8Mat+0x514>)
 8000804:	f000 ff1a 	bl	800163c <HAL_GPIO_TogglePin>
		            	HAL_GPIO_TogglePin ( ROW1_GPIO_Port , ROW1_Pin ) ;
 8000808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800080c:	481e      	ldr	r0, [pc, #120]	; (8000888 <display8x8Mat+0x514>)
 800080e:	f000 ff15 	bl	800163c <HAL_GPIO_TogglePin>
		                break;
 8000812:	e035      	b.n	8000880 <display8x8Mat+0x50c>
		            case 'D':
		            case 'd':
		            	HAL_GPIO_TogglePin ( ROW0_GPIO_Port , ROW0_Pin ) ;
 8000814:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000818:	481b      	ldr	r0, [pc, #108]	; (8000888 <display8x8Mat+0x514>)
 800081a:	f000 ff0f 	bl	800163c <HAL_GPIO_TogglePin>
		            	HAL_GPIO_TogglePin ( ROW1_GPIO_Port , ROW1_Pin ) ;
 800081e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000822:	4819      	ldr	r0, [pc, #100]	; (8000888 <display8x8Mat+0x514>)
 8000824:	f000 ff0a 	bl	800163c <HAL_GPIO_TogglePin>
		            	HAL_GPIO_TogglePin ( ROW3_GPIO_Port , ROW3_Pin ) ;
 8000828:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800082c:	4816      	ldr	r0, [pc, #88]	; (8000888 <display8x8Mat+0x514>)
 800082e:	f000 ff05 	bl	800163c <HAL_GPIO_TogglePin>
		                break;
 8000832:	e025      	b.n	8000880 <display8x8Mat+0x50c>
		            case 'E':
		            case 'e':
		            	HAL_GPIO_TogglePin ( ROW0_GPIO_Port , ROW0_Pin ) ;
 8000834:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000838:	4813      	ldr	r0, [pc, #76]	; (8000888 <display8x8Mat+0x514>)
 800083a:	f000 feff 	bl	800163c <HAL_GPIO_TogglePin>
		            	HAL_GPIO_TogglePin ( ROW1_GPIO_Port , ROW1_Pin ) ;
 800083e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000842:	4811      	ldr	r0, [pc, #68]	; (8000888 <display8x8Mat+0x514>)
 8000844:	f000 fefa 	bl	800163c <HAL_GPIO_TogglePin>
		            	HAL_GPIO_TogglePin ( ROW2_GPIO_Port , ROW2_Pin ) ;
 8000848:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084c:	480e      	ldr	r0, [pc, #56]	; (8000888 <display8x8Mat+0x514>)
 800084e:	f000 fef5 	bl	800163c <HAL_GPIO_TogglePin>
		                break;
 8000852:	e015      	b.n	8000880 <display8x8Mat+0x50c>
		            case 'F':
		            case 'f':
		            	HAL_GPIO_TogglePin ( ROW0_GPIO_Port , ROW0_Pin ) ;
 8000854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <display8x8Mat+0x514>)
 800085a:	f000 feef 	bl	800163c <HAL_GPIO_TogglePin>
		            	HAL_GPIO_TogglePin ( ROW1_GPIO_Port , ROW1_Pin ) ;
 800085e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000862:	4809      	ldr	r0, [pc, #36]	; (8000888 <display8x8Mat+0x514>)
 8000864:	f000 feea 	bl	800163c <HAL_GPIO_TogglePin>
		            	HAL_GPIO_TogglePin ( ROW2_GPIO_Port , ROW2_Pin ) ;
 8000868:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086c:	4806      	ldr	r0, [pc, #24]	; (8000888 <display8x8Mat+0x514>)
 800086e:	f000 fee5 	bl	800163c <HAL_GPIO_TogglePin>
		            	HAL_GPIO_TogglePin ( ROW3_GPIO_Port , ROW3_Pin ) ;
 8000872:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <display8x8Mat+0x514>)
 8000878:	f000 fee0 	bl	800163c <HAL_GPIO_TogglePin>
		                break;
 800087c:	e000      	b.n	8000880 <display8x8Mat+0x50c>
		                break;
 800087e:	bf00      	nop
		        }
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40010c00 	.word	0x40010c00

0800088c <update8x8Mat>:

const int MAX_LED_MATRIX = 8;
int index_led_matrix = 0;
char matrix_buffer [][8] = {"0x00","0x66","0xff","0xff","0xff","0x7e","0x3c","0x18" };

void update8x8Mat ( int index ) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
		display8x8Mat(matrix_buffer[index]);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	00db      	lsls	r3, r3, #3
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <update8x8Mat+0x20>)
 800089a:	4413      	add	r3, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fd69 	bl	8000374 <display8x8Mat>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000000 	.word	0x20000000

080008b0 <update7SEG>:

const int MAX_LED = 4;
int index_led = 0;
int led_buffer [4] = {1 , 2 , 3 , 0};

void update7SEG ( int index ) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d822      	bhi.n	8000904 <update7SEG+0x54>
 80008be:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <update7SEG+0x14>)
 80008c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c4:	080008d5 	.word	0x080008d5
 80008c8:	080008e1 	.word	0x080008e1
 80008cc:	080008ed 	.word	0x080008ed
 80008d0:	080008f9 	.word	0x080008f9
switch ( index ) {
	case 0:
// Display the first 7 SEG with led_buffer [0]
		display7SEG(led_buffer[0]);
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <update7SEG+0x60>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fc37 	bl	800014c <display7SEG>
		break ;
 80008de:	e012      	b.n	8000906 <update7SEG+0x56>
	case 1:
// Display the second 7 SEG with led_buffer [1]
		display7SEG(led_buffer[1]);
 80008e0:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <update7SEG+0x60>)
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fc31 	bl	800014c <display7SEG>
		break ;
 80008ea:	e00c      	b.n	8000906 <update7SEG+0x56>
	case 2:
// Display the third 7 SEG with led_buffer [2]
		display7SEG(led_buffer[2]);
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <update7SEG+0x60>)
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fc2b 	bl	800014c <display7SEG>
		break ;
 80008f6:	e006      	b.n	8000906 <update7SEG+0x56>
	case 3:
// Display the forth 7 SEG with led_buffer [3]
		display7SEG(led_buffer[3]);
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <update7SEG+0x60>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fc25 	bl	800014c <display7SEG>
		break ;
 8000902:	e000      	b.n	8000906 <update7SEG+0x56>
	default :
		break ;
 8000904:	bf00      	nop
	}
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000040 	.word	0x20000040

08000914 <updateClockBuffer>:

void updateClockBuffer (int hour, int minute){
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
	led_buffer[0] = hour / 10;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a18      	ldr	r2, [pc, #96]	; (8000984 <updateClockBuffer+0x70>)
 8000922:	fb82 1203 	smull	r1, r2, r2, r3
 8000926:	1092      	asrs	r2, r2, #2
 8000928:	17db      	asrs	r3, r3, #31
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	4a16      	ldr	r2, [pc, #88]	; (8000988 <updateClockBuffer+0x74>)
 800092e:	6013      	str	r3, [r2, #0]
	led_buffer[1] =  hour % 10;
 8000930:	6879      	ldr	r1, [r7, #4]
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <updateClockBuffer+0x70>)
 8000934:	fb83 2301 	smull	r2, r3, r3, r1
 8000938:	109a      	asrs	r2, r3, #2
 800093a:	17cb      	asrs	r3, r1, #31
 800093c:	1ad2      	subs	r2, r2, r3
 800093e:	4613      	mov	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4413      	add	r3, r2
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	1aca      	subs	r2, r1, r3
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <updateClockBuffer+0x74>)
 800094a:	605a      	str	r2, [r3, #4]
	led_buffer[2] =  minute /10;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <updateClockBuffer+0x70>)
 8000950:	fb82 1203 	smull	r1, r2, r2, r3
 8000954:	1092      	asrs	r2, r2, #2
 8000956:	17db      	asrs	r3, r3, #31
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <updateClockBuffer+0x74>)
 800095c:	6093      	str	r3, [r2, #8]
	led_buffer[3] =  minute % 10;
 800095e:	6839      	ldr	r1, [r7, #0]
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <updateClockBuffer+0x70>)
 8000962:	fb83 2301 	smull	r2, r3, r3, r1
 8000966:	109a      	asrs	r2, r3, #2
 8000968:	17cb      	asrs	r3, r1, #31
 800096a:	1ad2      	subs	r2, r2, r3
 800096c:	4613      	mov	r3, r2
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	4413      	add	r3, r2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	1aca      	subs	r2, r1, r3
 8000976:	4b04      	ldr	r3, [pc, #16]	; (8000988 <updateClockBuffer+0x74>)
 8000978:	60da      	str	r2, [r3, #12]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	66666667 	.word	0x66666667
 8000988:	20000040 	.word	0x20000040

0800098c <setTimer0>:

int timer0_counter = 0;
int timer0_flag = 0;
int TIMER_CYCLE = 10;

void setTimer0 ( int duration ){
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE ;
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <setTimer0+0x28>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	fb92 f3f3 	sdiv	r3, r2, r3
 800099e:	4a06      	ldr	r2, [pc, #24]	; (80009b8 <setTimer0+0x2c>)
 80009a0:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <setTimer0+0x30>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000050 	.word	0x20000050
 80009b8:	2000007c 	.word	0x2000007c
 80009bc:	20000080 	.word	0x20000080

080009c0 <timer_run>:
void timer_run (){
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
if( timer0_counter > 0){
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <timer_run+0x2c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	dd0b      	ble.n	80009e4 <timer_run+0x24>
	timer0_counter --;
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <timer_run+0x2c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	4a06      	ldr	r2, [pc, #24]	; (80009ec <timer_run+0x2c>)
 80009d4:	6013      	str	r3, [r2, #0]
	if( timer0_counter == 0) {timer0_flag = 1;}
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <timer_run+0x2c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d102      	bne.n	80009e4 <timer_run+0x24>
 80009de:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <timer_run+0x30>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	601a      	str	r2, [r3, #0]
	}
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	2000007c 	.word	0x2000007c
 80009f0:	20000080 	.word	0x20000080

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fa:	f000 fb1d 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fe:	f000 f979 	bl	8000cf4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  MX_GPIO_Init();
 8000a02:	f000 f9ff 	bl	8000e04 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a06:	f000 f9b1 	bl	8000d6c <MX_TIM2_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0a:	f000 f9fb 	bl	8000e04 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a0e:	f000 f9ad 	bl	8000d6c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	int hour = 15, minute = 8, second = 50;
 8000a12:	230f      	movs	r3, #15
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	2308      	movs	r3, #8
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	2332      	movs	r3, #50	; 0x32
 8000a1c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin,GPIO_PIN_SET ) ;
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2101      	movs	r1, #1
 8000a22:	48b0      	ldr	r0, [pc, #704]	; (8000ce4 <main+0x2f0>)
 8000a24:	f000 fdf2 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin,GPIO_PIN_SET ) ;
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2102      	movs	r1, #2
 8000a2c:	48ad      	ldr	r0, [pc, #692]	; (8000ce4 <main+0x2f0>)
 8000a2e:	f000 fded 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin,GPIO_PIN_SET ) ;
 8000a32:	2201      	movs	r2, #1
 8000a34:	2104      	movs	r1, #4
 8000a36:	48ab      	ldr	r0, [pc, #684]	; (8000ce4 <main+0x2f0>)
 8000a38:	f000 fde8 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin,GPIO_PIN_SET ) ;
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2108      	movs	r1, #8
 8000a40:	48a8      	ldr	r0, [pc, #672]	; (8000ce4 <main+0x2f0>)
 8000a42:	f000 fde3 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin,GPIO_PIN_SET ) ;
 8000a46:	2201      	movs	r2, #1
 8000a48:	2110      	movs	r1, #16
 8000a4a:	48a6      	ldr	r0, [pc, #664]	; (8000ce4 <main+0x2f0>)
 8000a4c:	f000 fdde 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin,GPIO_PIN_SET ) ;
 8000a50:	2201      	movs	r2, #1
 8000a52:	2120      	movs	r1, #32
 8000a54:	48a3      	ldr	r0, [pc, #652]	; (8000ce4 <main+0x2f0>)
 8000a56:	f000 fdd9 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin,GPIO_PIN_SET ) ;
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2140      	movs	r1, #64	; 0x40
 8000a5e:	48a1      	ldr	r0, [pc, #644]	; (8000ce4 <main+0x2f0>)
 8000a60:	f000 fdd4 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( EN0_GPIO_Port , EN0_Pin,GPIO_PIN_SET ) ;
 8000a64:	2201      	movs	r2, #1
 8000a66:	2140      	movs	r1, #64	; 0x40
 8000a68:	489f      	ldr	r0, [pc, #636]	; (8000ce8 <main+0x2f4>)
 8000a6a:	f000 fdcf 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin,GPIO_PIN_SET ) ;
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	489d      	ldr	r0, [pc, #628]	; (8000ce8 <main+0x2f4>)
 8000a74:	f000 fdca 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin,GPIO_PIN_SET ) ;
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7e:	489a      	ldr	r0, [pc, #616]	; (8000ce8 <main+0x2f4>)
 8000a80:	f000 fdc4 	bl	800160c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin,GPIO_PIN_SET ) ;
 8000a84:	2201      	movs	r2, #1
 8000a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8a:	4897      	ldr	r0, [pc, #604]	; (8000ce8 <main+0x2f4>)
 8000a8c:	f000 fdbe 	bl	800160c <HAL_GPIO_WritePin>
	setTimer0 (100) ;
 8000a90:	2064      	movs	r0, #100	; 0x64
 8000a92:	f7ff ff7b 	bl	800098c <setTimer0>
	int flip = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
	int flip2 = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
  HAL_TIM_Base_Start_IT(&htim2);
 8000a9e:	4893      	ldr	r0, [pc, #588]	; (8000cec <main+0x2f8>)
 8000aa0:	f001 fa12 	bl	8001ec8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(timer0_flag == 1) {
 8000aa4:	4b92      	ldr	r3, [pc, #584]	; (8000cf0 <main+0x2fc>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d1fb      	bne.n	8000aa4 <main+0xb0>
			HAL_GPIO_WritePin ( EN0_GPIO_Port , EN0_Pin,GPIO_PIN_SET ) ;
 8000aac:	2201      	movs	r2, #1
 8000aae:	2140      	movs	r1, #64	; 0x40
 8000ab0:	488d      	ldr	r0, [pc, #564]	; (8000ce8 <main+0x2f4>)
 8000ab2:	f000 fdab 	bl	800160c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin,GPIO_PIN_SET ) ;
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	488b      	ldr	r0, [pc, #556]	; (8000ce8 <main+0x2f4>)
 8000abc:	f000 fda6 	bl	800160c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin,GPIO_PIN_SET ) ;
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac6:	4888      	ldr	r0, [pc, #544]	; (8000ce8 <main+0x2f4>)
 8000ac8:	f000 fda0 	bl	800160c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin,GPIO_PIN_SET ) ;
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad2:	4885      	ldr	r0, [pc, #532]	; (8000ce8 <main+0x2f4>)
 8000ad4:	f000 fd9a 	bl	800160c <HAL_GPIO_WritePin>

			  if(flip == 0){
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d10c      	bne.n	8000af8 <main+0x104>
				  HAL_GPIO_TogglePin ( EN0_GPIO_Port , EN0_Pin ) ;
 8000ade:	2140      	movs	r1, #64	; 0x40
 8000ae0:	4881      	ldr	r0, [pc, #516]	; (8000ce8 <main+0x2f4>)
 8000ae2:	f000 fdab 	bl	800163c <HAL_GPIO_TogglePin>
				  update7SEG(flip);
 8000ae6:	68b8      	ldr	r0, [r7, #8]
 8000ae8:	f7ff fee2 	bl	80008b0 <update7SEG>
				  flip = 1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
				  setTimer0 (250);
 8000af0:	20fa      	movs	r0, #250	; 0xfa
 8000af2:	f7ff ff4b 	bl	800098c <setTimer0>
 8000af6:	e030      	b.n	8000b5a <main+0x166>
			  }
			  else if(flip == 1){
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d10c      	bne.n	8000b18 <main+0x124>
				  HAL_GPIO_TogglePin ( EN1_GPIO_Port , EN1_Pin ) ;
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	4879      	ldr	r0, [pc, #484]	; (8000ce8 <main+0x2f4>)
 8000b02:	f000 fd9b 	bl	800163c <HAL_GPIO_TogglePin>
				  update7SEG(flip);
 8000b06:	68b8      	ldr	r0, [r7, #8]
 8000b08:	f7ff fed2 	bl	80008b0 <update7SEG>
				  flip = 2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	60bb      	str	r3, [r7, #8]
				  setTimer0 (250);
 8000b10:	20fa      	movs	r0, #250	; 0xfa
 8000b12:	f7ff ff3b 	bl	800098c <setTimer0>
 8000b16:	e020      	b.n	8000b5a <main+0x166>
			  }
			  else if(flip == 2){
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d10d      	bne.n	8000b3a <main+0x146>
				  HAL_GPIO_TogglePin ( EN2_GPIO_Port , EN2_Pin ) ;
 8000b1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b22:	4871      	ldr	r0, [pc, #452]	; (8000ce8 <main+0x2f4>)
 8000b24:	f000 fd8a 	bl	800163c <HAL_GPIO_TogglePin>
				  update7SEG(flip);
 8000b28:	68b8      	ldr	r0, [r7, #8]
 8000b2a:	f7ff fec1 	bl	80008b0 <update7SEG>
				  flip = 3;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	60bb      	str	r3, [r7, #8]
				  setTimer0 (250);
 8000b32:	20fa      	movs	r0, #250	; 0xfa
 8000b34:	f7ff ff2a 	bl	800098c <setTimer0>
 8000b38:	e00f      	b.n	8000b5a <main+0x166>
			  }
			  else if(flip == 3){
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	2b03      	cmp	r3, #3
 8000b3e:	d10c      	bne.n	8000b5a <main+0x166>
				  HAL_GPIO_TogglePin ( EN3_GPIO_Port , EN3_Pin ) ;
 8000b40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b44:	4868      	ldr	r0, [pc, #416]	; (8000ce8 <main+0x2f4>)
 8000b46:	f000 fd79 	bl	800163c <HAL_GPIO_TogglePin>
				  update7SEG(flip);
 8000b4a:	68b8      	ldr	r0, [r7, #8]
 8000b4c:	f7ff feb0 	bl	80008b0 <update7SEG>
				  flip = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
				  setTimer0 (250);
 8000b54:	20fa      	movs	r0, #250	; 0xfa
 8000b56:	f7ff ff19 	bl	800098c <setTimer0>
			  }

			  if( flip == 3){
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	2b03      	cmp	r3, #3
 8000b5e:	d123      	bne.n	8000ba8 <main+0x1b4>
					second++;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3301      	adds	r3, #1
 8000b64:	60fb      	str	r3, [r7, #12]
					 if ( second >= 60) {
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	2b3b      	cmp	r3, #59	; 0x3b
 8000b6a:	dd04      	ble.n	8000b76 <main+0x182>
						 second = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
						 minute ++;
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	3301      	adds	r3, #1
 8000b74:	613b      	str	r3, [r7, #16]
					 }
					 if( minute >= 60) {
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	2b3b      	cmp	r3, #59	; 0x3b
 8000b7a:	dd04      	ble.n	8000b86 <main+0x192>
						 minute = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
						 hour ++;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	3301      	adds	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
					 }
					 if( hour >=24){
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	2b17      	cmp	r3, #23
 8000b8a:	dd01      	ble.n	8000b90 <main+0x19c>
						 hour = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
					 }
					 updateClockBuffer (hour,minute);
 8000b90:	6939      	ldr	r1, [r7, #16]
 8000b92:	6978      	ldr	r0, [r7, #20]
 8000b94:	f7ff febe 	bl	8000914 <updateClockBuffer>
					 HAL_GPIO_TogglePin ( LED_RED_GPIO_Port , LED_RED_Pin );
 8000b98:	2120      	movs	r1, #32
 8000b9a:	4853      	ldr	r0, [pc, #332]	; (8000ce8 <main+0x2f4>)
 8000b9c:	f000 fd4e 	bl	800163c <HAL_GPIO_TogglePin>
					 HAL_GPIO_TogglePin ( DOT_GPIO_Port , DOT_Pin );
 8000ba0:	2110      	movs	r1, #16
 8000ba2:	4851      	ldr	r0, [pc, #324]	; (8000ce8 <main+0x2f4>)
 8000ba4:	f000 fd4a 	bl	800163c <HAL_GPIO_TogglePin>
					 //setTimer0 (250) ;
			  }
				HAL_GPIO_WritePin ( ENM0_GPIO_Port , ENM0_Pin,GPIO_PIN_SET ) ;
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2104      	movs	r1, #4
 8000bac:	484e      	ldr	r0, [pc, #312]	; (8000ce8 <main+0x2f4>)
 8000bae:	f000 fd2d 	bl	800160c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( ENM1_GPIO_Port , ENM1_Pin,GPIO_PIN_SET ) ;
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2108      	movs	r1, #8
 8000bb6:	484c      	ldr	r0, [pc, #304]	; (8000ce8 <main+0x2f4>)
 8000bb8:	f000 fd28 	bl	800160c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( ENM2_GPIO_Port , ENM2_Pin,GPIO_PIN_SET ) ;
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc2:	4849      	ldr	r0, [pc, #292]	; (8000ce8 <main+0x2f4>)
 8000bc4:	f000 fd22 	bl	800160c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( ENM3_GPIO_Port , ENM3_Pin,GPIO_PIN_SET ) ;
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bce:	4846      	ldr	r0, [pc, #280]	; (8000ce8 <main+0x2f4>)
 8000bd0:	f000 fd1c 	bl	800160c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( ENM4_GPIO_Port , ENM4_Pin,GPIO_PIN_SET ) ;
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bda:	4843      	ldr	r0, [pc, #268]	; (8000ce8 <main+0x2f4>)
 8000bdc:	f000 fd16 	bl	800160c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( ENM5_GPIO_Port , ENM5_Pin,GPIO_PIN_SET ) ;
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be6:	4840      	ldr	r0, [pc, #256]	; (8000ce8 <main+0x2f4>)
 8000be8:	f000 fd10 	bl	800160c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( ENM6_GPIO_Port , ENM6_Pin,GPIO_PIN_SET ) ;
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bf2:	483d      	ldr	r0, [pc, #244]	; (8000ce8 <main+0x2f4>)
 8000bf4:	f000 fd0a 	bl	800160c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( ENM7_GPIO_Port , ENM7_Pin,GPIO_PIN_SET ) ;
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bfe:	483a      	ldr	r0, [pc, #232]	; (8000ce8 <main+0x2f4>)
 8000c00:	f000 fd04 	bl	800160c <HAL_GPIO_WritePin>
			  if(flip2 == 0){
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d109      	bne.n	8000c1e <main+0x22a>
				  HAL_GPIO_TogglePin ( ENM0_GPIO_Port , ENM0_Pin ) ;
 8000c0a:	2104      	movs	r1, #4
 8000c0c:	4836      	ldr	r0, [pc, #216]	; (8000ce8 <main+0x2f4>)
 8000c0e:	f000 fd15 	bl	800163c <HAL_GPIO_TogglePin>
				  update8x8Mat(flip2);
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff fe3a 	bl	800088c <update8x8Mat>
			  	  flip2 = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	e742      	b.n	8000aa4 <main+0xb0>
			  }
			  else if(flip2 == 1){
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d109      	bne.n	8000c38 <main+0x244>
				  HAL_GPIO_TogglePin ( ENM1_GPIO_Port , ENM1_Pin ) ;
 8000c24:	2108      	movs	r1, #8
 8000c26:	4830      	ldr	r0, [pc, #192]	; (8000ce8 <main+0x2f4>)
 8000c28:	f000 fd08 	bl	800163c <HAL_GPIO_TogglePin>
				  update8x8Mat(flip2);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fe2d 	bl	800088c <update8x8Mat>
			  	  flip2 = 2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	e735      	b.n	8000aa4 <main+0xb0>
			  }
			  else if(flip2 == 2){
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d10a      	bne.n	8000c54 <main+0x260>
				  HAL_GPIO_TogglePin ( ENM2_GPIO_Port , ENM2_Pin ) ;
 8000c3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c42:	4829      	ldr	r0, [pc, #164]	; (8000ce8 <main+0x2f4>)
 8000c44:	f000 fcfa 	bl	800163c <HAL_GPIO_TogglePin>
				  update8x8Mat(flip2);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff fe1f 	bl	800088c <update8x8Mat>
			  	  flip2 = 3;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	e727      	b.n	8000aa4 <main+0xb0>
			  }
			  else if(flip2 == 3){
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d10a      	bne.n	8000c70 <main+0x27c>
			  	  HAL_GPIO_TogglePin ( ENM3_GPIO_Port , ENM3_Pin ) ;
 8000c5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c5e:	4822      	ldr	r0, [pc, #136]	; (8000ce8 <main+0x2f4>)
 8000c60:	f000 fcec 	bl	800163c <HAL_GPIO_TogglePin>
			  	update8x8Mat(flip2);
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff fe11 	bl	800088c <update8x8Mat>
			   	  flip2 = 4;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	e719      	b.n	8000aa4 <main+0xb0>
			  }
			  else if(flip2 == 4){
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	d10a      	bne.n	8000c8c <main+0x298>
				  HAL_GPIO_TogglePin ( ENM4_GPIO_Port , ENM4_Pin ) ;
 8000c76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c7a:	481b      	ldr	r0, [pc, #108]	; (8000ce8 <main+0x2f4>)
 8000c7c:	f000 fcde 	bl	800163c <HAL_GPIO_TogglePin>
				  update8x8Mat(flip2);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fe03 	bl	800088c <update8x8Mat>
			  	  flip2 = 5;
 8000c86:	2305      	movs	r3, #5
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	e70b      	b.n	8000aa4 <main+0xb0>
			  }
			  else if(flip2 == 5){
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b05      	cmp	r3, #5
 8000c90:	d10a      	bne.n	8000ca8 <main+0x2b4>
			  	  HAL_GPIO_TogglePin ( ENM5_GPIO_Port , ENM5_Pin ) ;
 8000c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c96:	4814      	ldr	r0, [pc, #80]	; (8000ce8 <main+0x2f4>)
 8000c98:	f000 fcd0 	bl	800163c <HAL_GPIO_TogglePin>
			  	update8x8Mat(flip2);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff fdf5 	bl	800088c <update8x8Mat>
			   	  flip2 = 6;
 8000ca2:	2306      	movs	r3, #6
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	e6fd      	b.n	8000aa4 <main+0xb0>
			  }
			  else if(flip2 == 6){
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d10a      	bne.n	8000cc4 <main+0x2d0>
				  HAL_GPIO_TogglePin ( ENM6_GPIO_Port , ENM6_Pin ) ;
 8000cae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cb2:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <main+0x2f4>)
 8000cb4:	f000 fcc2 	bl	800163c <HAL_GPIO_TogglePin>
				  update8x8Mat(flip2);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff fde7 	bl	800088c <update8x8Mat>
			   	  flip2 = 7;
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	e6ef      	b.n	8000aa4 <main+0xb0>
			  }
			  else if(flip2 == 7){
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b07      	cmp	r3, #7
 8000cc8:	f47f aeec 	bne.w	8000aa4 <main+0xb0>
			  	  HAL_GPIO_TogglePin ( ENM7_GPIO_Port , ENM7_Pin ) ;
 8000ccc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <main+0x2f4>)
 8000cd2:	f000 fcb3 	bl	800163c <HAL_GPIO_TogglePin>
			  	update8x8Mat(flip2);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff fdd8 	bl	800088c <update8x8Mat>
			   	  flip2 = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
	  if(timer0_flag == 1) {
 8000ce0:	e6e0      	b.n	8000aa4 <main+0xb0>
 8000ce2:	bf00      	nop
 8000ce4:	40010c00 	.word	0x40010c00
 8000ce8:	40010800 	.word	0x40010800
 8000cec:	20000084 	.word	0x20000084
 8000cf0:	20000080 	.word	0x20000080

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b090      	sub	sp, #64	; 0x40
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	f107 0318 	add.w	r3, r7, #24
 8000cfe:	2228      	movs	r2, #40	; 0x28
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 fc9c 	bl	8002640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d16:	2302      	movs	r3, #2
 8000d18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d1e:	2310      	movs	r3, #16
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d26:	f107 0318 	add.w	r3, r7, #24
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 fca0 	bl	8001670 <HAL_RCC_OscConfig>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d36:	f000 f8c5 	bl	8000ec4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3a:	230f      	movs	r3, #15
 8000d3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 ff0c 	bl	8001b70 <HAL_RCC_ClockConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d5e:	f000 f8b1 	bl	8000ec4 <Error_Handler>
  }
}
 8000d62:	bf00      	nop
 8000d64:	3740      	adds	r7, #64	; 0x40
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d80:	463b      	mov	r3, r7
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <MX_TIM2_Init+0x94>)
 8000d8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <MX_TIM2_Init+0x94>)
 8000d92:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <MX_TIM2_Init+0x94>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <MX_TIM2_Init+0x94>)
 8000da0:	2209      	movs	r2, #9
 8000da2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <MX_TIM2_Init+0x94>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <MX_TIM2_Init+0x94>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000db0:	4813      	ldr	r0, [pc, #76]	; (8000e00 <MX_TIM2_Init+0x94>)
 8000db2:	f001 f839 	bl	8001e28 <HAL_TIM_Base_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000dbc:	f000 f882 	bl	8000ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dc6:	f107 0308 	add.w	r3, r7, #8
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <MX_TIM2_Init+0x94>)
 8000dce:	f001 f9cf 	bl	8002170 <HAL_TIM_ConfigClockSource>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000dd8:	f000 f874 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_TIM2_Init+0x94>)
 8000dea:	f001 fb9b 	bl	8002524 <HAL_TIMEx_MasterConfigSynchronization>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000df4:	f000 f866 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000084 	.word	0x20000084

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <MX_GPIO_Init+0xa0>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a21      	ldr	r2, [pc, #132]	; (8000ea4 <MX_GPIO_Init+0xa0>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <MX_GPIO_Init+0xa0>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <MX_GPIO_Init+0xa0>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <MX_GPIO_Init+0xa0>)
 8000e36:	f043 0308 	orr.w	r3, r3, #8
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_GPIO_Init+0xa0>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0308 	and.w	r3, r3, #8
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8000e4e:	4816      	ldr	r0, [pc, #88]	; (8000ea8 <MX_GPIO_Init+0xa4>)
 8000e50:	f000 fbdc 	bl	800160c <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 8000e54:	2200      	movs	r2, #0
 8000e56:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8000e5a:	4814      	ldr	r0, [pc, #80]	; (8000eac <MX_GPIO_Init+0xa8>)
 8000e5c:	f000 fbd6 	bl	800160c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8000e60:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000e64:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4619      	mov	r1, r3
 8000e78:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <MX_GPIO_Init+0xa4>)
 8000e7a:	f000 fa4d 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 8000e7e:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8000e82:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	4619      	mov	r1, r3
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_GPIO_Init+0xa8>)
 8000e98:	f000 fa3e 	bl	8001318 <HAL_GPIO_Init>

}
 8000e9c:	bf00      	nop
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010800 	.word	0x40010800
 8000eac:	40010c00 	.word	0x40010c00

08000eb0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
int counter = 100;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
timer_run ();
 8000eb8:	f7ff fd82 	bl	80009c0 <timer_run>
			update7SEG(flip);
			flip = 0;
		}
	}*/

}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <Error_Handler+0x8>
	...

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_MspInit+0x5c>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <HAL_MspInit+0x5c>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6193      	str	r3, [r2, #24]
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_MspInit+0x5c>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <HAL_MspInit+0x5c>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <HAL_MspInit+0x5c>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	61d3      	str	r3, [r2, #28]
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_MspInit+0x5c>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_MspInit+0x60>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <HAL_MspInit+0x60>)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010000 	.word	0x40010000

08000f34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f44:	d113      	bne.n	8000f6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <HAL_TIM_Base_MspInit+0x44>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <HAL_TIM_Base_MspInit+0x44>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	61d3      	str	r3, [r2, #28]
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_TIM_Base_MspInit+0x44>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	201c      	movs	r0, #28
 8000f64:	f000 f9a1 	bl	80012aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f68:	201c      	movs	r0, #28
 8000f6a:	f000 f9ba 	bl	80012e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <NMI_Handler+0x4>

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <MemManage_Handler+0x4>

08000f8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr

08000fa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr

08000fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr

08000fbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc2:	f000 f87f 	bl	80010c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <TIM2_IRQHandler+0x10>)
 8000fd2:	f000 ffc5 	bl	8001f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000084 	.word	0x20000084

08000fe0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fec:	f7ff fff8 	bl	8000fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff0:	480b      	ldr	r0, [pc, #44]	; (8001020 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ff2:	490c      	ldr	r1, [pc, #48]	; (8001024 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a09      	ldr	r2, [pc, #36]	; (800102c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001008:	4c09      	ldr	r4, [pc, #36]	; (8001030 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001016:	f001 faef 	bl	80025f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800101a:	f7ff fceb 	bl	80009f4 <main>
  bx lr
 800101e:	4770      	bx	lr
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001028:	08002694 	.word	0x08002694
  ldr r2, =_sbss
 800102c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001030:	200000d0 	.word	0x200000d0

08001034 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC1_2_IRQHandler>
	...

08001038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_Init+0x28>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_Init+0x28>)
 8001042:	f043 0310 	orr.w	r3, r3, #16
 8001046:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001048:	2003      	movs	r0, #3
 800104a:	f000 f923 	bl	8001294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104e:	200f      	movs	r0, #15
 8001050:	f000 f808 	bl	8001064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001054:	f7ff ff3c 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40022000 	.word	0x40022000

08001064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_InitTick+0x54>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_InitTick+0x58>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107a:	fbb3 f3f1 	udiv	r3, r3, r1
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f93b 	bl	80012fe <HAL_SYSTICK_Config>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e00e      	b.n	80010b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b0f      	cmp	r3, #15
 8001096:	d80a      	bhi.n	80010ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001098:	2200      	movs	r2, #0
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f000 f903 	bl	80012aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <HAL_InitTick+0x5c>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e000      	b.n	80010b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000054 	.word	0x20000054
 80010bc:	2000005c 	.word	0x2000005c
 80010c0:	20000058 	.word	0x20000058

080010c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <HAL_IncTick+0x1c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <HAL_IncTick+0x20>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a03      	ldr	r2, [pc, #12]	; (80010e4 <HAL_IncTick+0x20>)
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	2000005c 	.word	0x2000005c
 80010e4:	200000cc 	.word	0x200000cc

080010e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b02      	ldr	r3, [pc, #8]	; (80010f8 <HAL_GetTick+0x10>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	200000cc 	.word	0x200000cc

080010fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001118:	4013      	ands	r3, r2
 800111a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	60d3      	str	r3, [r2, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <__NVIC_GetPriorityGrouping+0x18>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	0a1b      	lsrs	r3, r3, #8
 800114e:	f003 0307 	and.w	r3, r3, #7
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	2b00      	cmp	r3, #0
 8001170:	db0b      	blt.n	800118a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	f003 021f 	and.w	r2, r3, #31
 8001178:	4906      	ldr	r1, [pc, #24]	; (8001194 <__NVIC_EnableIRQ+0x34>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	095b      	lsrs	r3, r3, #5
 8001180:	2001      	movs	r0, #1
 8001182:	fa00 f202 	lsl.w	r2, r0, r2
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100

08001198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db0a      	blt.n	80011c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	490c      	ldr	r1, [pc, #48]	; (80011e4 <__NVIC_SetPriority+0x4c>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	0112      	lsls	r2, r2, #4
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	440b      	add	r3, r1
 80011bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c0:	e00a      	b.n	80011d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4908      	ldr	r1, [pc, #32]	; (80011e8 <__NVIC_SetPriority+0x50>)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	3b04      	subs	r3, #4
 80011d0:	0112      	lsls	r2, r2, #4
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	761a      	strb	r2, [r3, #24]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000e100 	.word	0xe000e100
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f1c3 0307 	rsb	r3, r3, #7
 8001206:	2b04      	cmp	r3, #4
 8001208:	bf28      	it	cs
 800120a:	2304      	movcs	r3, #4
 800120c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3304      	adds	r3, #4
 8001212:	2b06      	cmp	r3, #6
 8001214:	d902      	bls.n	800121c <NVIC_EncodePriority+0x30>
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3b03      	subs	r3, #3
 800121a:	e000      	b.n	800121e <NVIC_EncodePriority+0x32>
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	401a      	ands	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43d9      	mvns	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4313      	orrs	r3, r2
         );
}
 8001246:	4618      	mov	r0, r3
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001260:	d301      	bcc.n	8001266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001262:	2301      	movs	r3, #1
 8001264:	e00f      	b.n	8001286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <SysTick_Config+0x40>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126e:	210f      	movs	r1, #15
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f7ff ff90 	bl	8001198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <SysTick_Config+0x40>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <SysTick_Config+0x40>)
 8001280:	2207      	movs	r2, #7
 8001282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	e000e010 	.word	0xe000e010

08001294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff2d 	bl	80010fc <__NVIC_SetPriorityGrouping>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012bc:	f7ff ff42 	bl	8001144 <__NVIC_GetPriorityGrouping>
 80012c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff ff90 	bl	80011ec <NVIC_EncodePriority>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff5f 	bl	8001198 <__NVIC_SetPriority>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff35 	bl	8001160 <__NVIC_EnableIRQ>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffa2 	bl	8001250 <SysTick_Config>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001318:	b480      	push	{r7}
 800131a:	b08b      	sub	sp, #44	; 0x2c
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132a:	e148      	b.n	80015be <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800132c:	2201      	movs	r2, #1
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	429a      	cmp	r2, r3
 8001346:	f040 8137 	bne.w	80015b8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	4aa3      	ldr	r2, [pc, #652]	; (80015dc <HAL_GPIO_Init+0x2c4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d05e      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001354:	4aa1      	ldr	r2, [pc, #644]	; (80015dc <HAL_GPIO_Init+0x2c4>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d875      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800135a:	4aa1      	ldr	r2, [pc, #644]	; (80015e0 <HAL_GPIO_Init+0x2c8>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d058      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001360:	4a9f      	ldr	r2, [pc, #636]	; (80015e0 <HAL_GPIO_Init+0x2c8>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d86f      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001366:	4a9f      	ldr	r2, [pc, #636]	; (80015e4 <HAL_GPIO_Init+0x2cc>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d052      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 800136c:	4a9d      	ldr	r2, [pc, #628]	; (80015e4 <HAL_GPIO_Init+0x2cc>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d869      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001372:	4a9d      	ldr	r2, [pc, #628]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d04c      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001378:	4a9b      	ldr	r2, [pc, #620]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d863      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800137e:	4a9b      	ldr	r2, [pc, #620]	; (80015ec <HAL_GPIO_Init+0x2d4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d046      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
 8001384:	4a99      	ldr	r2, [pc, #612]	; (80015ec <HAL_GPIO_Init+0x2d4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d85d      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 800138a:	2b12      	cmp	r3, #18
 800138c:	d82a      	bhi.n	80013e4 <HAL_GPIO_Init+0xcc>
 800138e:	2b12      	cmp	r3, #18
 8001390:	d859      	bhi.n	8001446 <HAL_GPIO_Init+0x12e>
 8001392:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <HAL_GPIO_Init+0x80>)
 8001394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001398:	08001413 	.word	0x08001413
 800139c:	080013ed 	.word	0x080013ed
 80013a0:	080013ff 	.word	0x080013ff
 80013a4:	08001441 	.word	0x08001441
 80013a8:	08001447 	.word	0x08001447
 80013ac:	08001447 	.word	0x08001447
 80013b0:	08001447 	.word	0x08001447
 80013b4:	08001447 	.word	0x08001447
 80013b8:	08001447 	.word	0x08001447
 80013bc:	08001447 	.word	0x08001447
 80013c0:	08001447 	.word	0x08001447
 80013c4:	08001447 	.word	0x08001447
 80013c8:	08001447 	.word	0x08001447
 80013cc:	08001447 	.word	0x08001447
 80013d0:	08001447 	.word	0x08001447
 80013d4:	08001447 	.word	0x08001447
 80013d8:	08001447 	.word	0x08001447
 80013dc:	080013f5 	.word	0x080013f5
 80013e0:	08001409 	.word	0x08001409
 80013e4:	4a82      	ldr	r2, [pc, #520]	; (80015f0 <HAL_GPIO_Init+0x2d8>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013ea:	e02c      	b.n	8001446 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	623b      	str	r3, [r7, #32]
          break;
 80013f2:	e029      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	3304      	adds	r3, #4
 80013fa:	623b      	str	r3, [r7, #32]
          break;
 80013fc:	e024      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	3308      	adds	r3, #8
 8001404:	623b      	str	r3, [r7, #32]
          break;
 8001406:	e01f      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	330c      	adds	r3, #12
 800140e:	623b      	str	r3, [r7, #32]
          break;
 8001410:	e01a      	b.n	8001448 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800141a:	2304      	movs	r3, #4
 800141c:	623b      	str	r3, [r7, #32]
          break;
 800141e:	e013      	b.n	8001448 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d105      	bne.n	8001434 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001428:	2308      	movs	r3, #8
 800142a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69fa      	ldr	r2, [r7, #28]
 8001430:	611a      	str	r2, [r3, #16]
          break;
 8001432:	e009      	b.n	8001448 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001434:	2308      	movs	r3, #8
 8001436:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	615a      	str	r2, [r3, #20]
          break;
 800143e:	e003      	b.n	8001448 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
          break;
 8001444:	e000      	b.n	8001448 <HAL_GPIO_Init+0x130>
          break;
 8001446:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2bff      	cmp	r3, #255	; 0xff
 800144c:	d801      	bhi.n	8001452 <HAL_GPIO_Init+0x13a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	e001      	b.n	8001456 <HAL_GPIO_Init+0x13e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3304      	adds	r3, #4
 8001456:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2bff      	cmp	r3, #255	; 0xff
 800145c:	d802      	bhi.n	8001464 <HAL_GPIO_Init+0x14c>
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	e002      	b.n	800146a <HAL_GPIO_Init+0x152>
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	3b08      	subs	r3, #8
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	210f      	movs	r1, #15
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	401a      	ands	r2, r3
 800147c:	6a39      	ldr	r1, [r7, #32]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	431a      	orrs	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 8090 	beq.w	80015b8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001498:	4b56      	ldr	r3, [pc, #344]	; (80015f4 <HAL_GPIO_Init+0x2dc>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a55      	ldr	r2, [pc, #340]	; (80015f4 <HAL_GPIO_Init+0x2dc>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b53      	ldr	r3, [pc, #332]	; (80015f4 <HAL_GPIO_Init+0x2dc>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014b0:	4a51      	ldr	r2, [pc, #324]	; (80015f8 <HAL_GPIO_Init+0x2e0>)
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a49      	ldr	r2, [pc, #292]	; (80015fc <HAL_GPIO_Init+0x2e4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d00d      	beq.n	80014f8 <HAL_GPIO_Init+0x1e0>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a48      	ldr	r2, [pc, #288]	; (8001600 <HAL_GPIO_Init+0x2e8>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d007      	beq.n	80014f4 <HAL_GPIO_Init+0x1dc>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a47      	ldr	r2, [pc, #284]	; (8001604 <HAL_GPIO_Init+0x2ec>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d101      	bne.n	80014f0 <HAL_GPIO_Init+0x1d8>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e004      	b.n	80014fa <HAL_GPIO_Init+0x1e2>
 80014f0:	2303      	movs	r3, #3
 80014f2:	e002      	b.n	80014fa <HAL_GPIO_Init+0x1e2>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <HAL_GPIO_Init+0x1e2>
 80014f8:	2300      	movs	r3, #0
 80014fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fc:	f002 0203 	and.w	r2, r2, #3
 8001500:	0092      	lsls	r2, r2, #2
 8001502:	4093      	lsls	r3, r2
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800150a:	493b      	ldr	r1, [pc, #236]	; (80015f8 <HAL_GPIO_Init+0x2e0>)
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d006      	beq.n	8001532 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001524:	4b38      	ldr	r3, [pc, #224]	; (8001608 <HAL_GPIO_Init+0x2f0>)
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	4937      	ldr	r1, [pc, #220]	; (8001608 <HAL_GPIO_Init+0x2f0>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	608b      	str	r3, [r1, #8]
 8001530:	e006      	b.n	8001540 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001532:	4b35      	ldr	r3, [pc, #212]	; (8001608 <HAL_GPIO_Init+0x2f0>)
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	43db      	mvns	r3, r3
 800153a:	4933      	ldr	r1, [pc, #204]	; (8001608 <HAL_GPIO_Init+0x2f0>)
 800153c:	4013      	ands	r3, r2
 800153e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d006      	beq.n	800155a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800154c:	4b2e      	ldr	r3, [pc, #184]	; (8001608 <HAL_GPIO_Init+0x2f0>)
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	492d      	ldr	r1, [pc, #180]	; (8001608 <HAL_GPIO_Init+0x2f0>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	60cb      	str	r3, [r1, #12]
 8001558:	e006      	b.n	8001568 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800155a:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <HAL_GPIO_Init+0x2f0>)
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	43db      	mvns	r3, r3
 8001562:	4929      	ldr	r1, [pc, #164]	; (8001608 <HAL_GPIO_Init+0x2f0>)
 8001564:	4013      	ands	r3, r2
 8001566:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <HAL_GPIO_Init+0x2f0>)
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4923      	ldr	r1, [pc, #140]	; (8001608 <HAL_GPIO_Init+0x2f0>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <HAL_GPIO_Init+0x2f0>)
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	43db      	mvns	r3, r3
 800158a:	491f      	ldr	r1, [pc, #124]	; (8001608 <HAL_GPIO_Init+0x2f0>)
 800158c:	4013      	ands	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d006      	beq.n	80015aa <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <HAL_GPIO_Init+0x2f0>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4919      	ldr	r1, [pc, #100]	; (8001608 <HAL_GPIO_Init+0x2f0>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]
 80015a8:	e006      	b.n	80015b8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <HAL_GPIO_Init+0x2f0>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	4915      	ldr	r1, [pc, #84]	; (8001608 <HAL_GPIO_Init+0x2f0>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	3301      	adds	r3, #1
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	fa22 f303 	lsr.w	r3, r2, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f47f aeaf 	bne.w	800132c <HAL_GPIO_Init+0x14>
  }
}
 80015ce:	bf00      	nop
 80015d0:	bf00      	nop
 80015d2:	372c      	adds	r7, #44	; 0x2c
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	10320000 	.word	0x10320000
 80015e0:	10310000 	.word	0x10310000
 80015e4:	10220000 	.word	0x10220000
 80015e8:	10210000 	.word	0x10210000
 80015ec:	10120000 	.word	0x10120000
 80015f0:	10110000 	.word	0x10110000
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40010000 	.word	0x40010000
 80015fc:	40010800 	.word	0x40010800
 8001600:	40010c00 	.word	0x40010c00
 8001604:	40011000 	.word	0x40011000
 8001608:	40010400 	.word	0x40010400

0800160c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
 8001618:	4613      	mov	r3, r2
 800161a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800161c:	787b      	ldrb	r3, [r7, #1]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001622:	887a      	ldrh	r2, [r7, #2]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001628:	e003      	b.n	8001632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800162a:	887b      	ldrh	r3, [r7, #2]
 800162c:	041a      	lsls	r2, r3, #16
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	611a      	str	r2, [r3, #16]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4013      	ands	r3, r2
 8001654:	041a      	lsls	r2, r3, #16
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43d9      	mvns	r1, r3
 800165a:	887b      	ldrh	r3, [r7, #2]
 800165c:	400b      	ands	r3, r1
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	611a      	str	r2, [r3, #16]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
	...

08001670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e26c      	b.n	8001b5c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 8087 	beq.w	800179e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001690:	4b92      	ldr	r3, [pc, #584]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 030c 	and.w	r3, r3, #12
 8001698:	2b04      	cmp	r3, #4
 800169a:	d00c      	beq.n	80016b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800169c:	4b8f      	ldr	r3, [pc, #572]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 030c 	and.w	r3, r3, #12
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	d112      	bne.n	80016ce <HAL_RCC_OscConfig+0x5e>
 80016a8:	4b8c      	ldr	r3, [pc, #560]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b4:	d10b      	bne.n	80016ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b6:	4b89      	ldr	r3, [pc, #548]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d06c      	beq.n	800179c <HAL_RCC_OscConfig+0x12c>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d168      	bne.n	800179c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e246      	b.n	8001b5c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d6:	d106      	bne.n	80016e6 <HAL_RCC_OscConfig+0x76>
 80016d8:	4b80      	ldr	r3, [pc, #512]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a7f      	ldr	r2, [pc, #508]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 80016de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	e02e      	b.n	8001744 <HAL_RCC_OscConfig+0xd4>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0x98>
 80016ee:	4b7b      	ldr	r3, [pc, #492]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a7a      	ldr	r2, [pc, #488]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 80016f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	4b78      	ldr	r3, [pc, #480]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a77      	ldr	r2, [pc, #476]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001700:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e01d      	b.n	8001744 <HAL_RCC_OscConfig+0xd4>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0xbc>
 8001712:	4b72      	ldr	r3, [pc, #456]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a71      	ldr	r2, [pc, #452]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b6f      	ldr	r3, [pc, #444]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a6e      	ldr	r2, [pc, #440]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e00b      	b.n	8001744 <HAL_RCC_OscConfig+0xd4>
 800172c:	4b6b      	ldr	r3, [pc, #428]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a6a      	ldr	r2, [pc, #424]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b68      	ldr	r3, [pc, #416]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a67      	ldr	r2, [pc, #412]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 800173e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001742:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d013      	beq.n	8001774 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff fccc 	bl	80010e8 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001754:	f7ff fcc8 	bl	80010e8 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	; 0x64
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e1fa      	b.n	8001b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	4b5d      	ldr	r3, [pc, #372]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0xe4>
 8001772:	e014      	b.n	800179e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fcb8 	bl	80010e8 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800177c:	f7ff fcb4 	bl	80010e8 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	; 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e1e6      	b.n	8001b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178e:	4b53      	ldr	r3, [pc, #332]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x10c>
 800179a:	e000      	b.n	800179e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d063      	beq.n	8001872 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017aa:	4b4c      	ldr	r3, [pc, #304]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00b      	beq.n	80017ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017b6:	4b49      	ldr	r3, [pc, #292]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 030c 	and.w	r3, r3, #12
 80017be:	2b08      	cmp	r3, #8
 80017c0:	d11c      	bne.n	80017fc <HAL_RCC_OscConfig+0x18c>
 80017c2:	4b46      	ldr	r3, [pc, #280]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d116      	bne.n	80017fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ce:	4b43      	ldr	r3, [pc, #268]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d005      	beq.n	80017e6 <HAL_RCC_OscConfig+0x176>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d001      	beq.n	80017e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e1ba      	b.n	8001b5c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e6:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4939      	ldr	r1, [pc, #228]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fa:	e03a      	b.n	8001872 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d020      	beq.n	8001846 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001804:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001806:	2201      	movs	r2, #1
 8001808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180a:	f7ff fc6d 	bl	80010e8 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001812:	f7ff fc69 	bl	80010e8 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e19b      	b.n	8001b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001824:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001830:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4927      	ldr	r1, [pc, #156]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]
 8001844:	e015      	b.n	8001872 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001846:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184c:	f7ff fc4c 	bl	80010e8 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001854:	f7ff fc48 	bl	80010e8 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e17a      	b.n	8001b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001866:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b00      	cmp	r3, #0
 800187c:	d03a      	beq.n	80018f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d019      	beq.n	80018ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <HAL_RCC_OscConfig+0x274>)
 8001888:	2201      	movs	r2, #1
 800188a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188c:	f7ff fc2c 	bl	80010e8 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001894:	f7ff fc28 	bl	80010e8 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e15a      	b.n	8001b5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HAL_RCC_OscConfig+0x26c>)
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018b2:	2001      	movs	r0, #1
 80018b4:	f000 fa9a 	bl	8001dec <RCC_Delay>
 80018b8:	e01c      	b.n	80018f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <HAL_RCC_OscConfig+0x274>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c0:	f7ff fc12 	bl	80010e8 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c6:	e00f      	b.n	80018e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c8:	f7ff fc0e 	bl	80010e8 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d908      	bls.n	80018e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e140      	b.n	8001b5c <HAL_RCC_OscConfig+0x4ec>
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
 80018e0:	42420000 	.word	0x42420000
 80018e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e8:	4b9e      	ldr	r3, [pc, #632]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 80018ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1e9      	bne.n	80018c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 80a6 	beq.w	8001a4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001906:	4b97      	ldr	r3, [pc, #604]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10d      	bne.n	800192e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	4b94      	ldr	r3, [pc, #592]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	4a93      	ldr	r2, [pc, #588]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191c:	61d3      	str	r3, [r2, #28]
 800191e:	4b91      	ldr	r3, [pc, #580]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800192a:	2301      	movs	r3, #1
 800192c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192e:	4b8e      	ldr	r3, [pc, #568]	; (8001b68 <HAL_RCC_OscConfig+0x4f8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001936:	2b00      	cmp	r3, #0
 8001938:	d118      	bne.n	800196c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800193a:	4b8b      	ldr	r3, [pc, #556]	; (8001b68 <HAL_RCC_OscConfig+0x4f8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a8a      	ldr	r2, [pc, #552]	; (8001b68 <HAL_RCC_OscConfig+0x4f8>)
 8001940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001946:	f7ff fbcf 	bl	80010e8 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194e:	f7ff fbcb 	bl	80010e8 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b64      	cmp	r3, #100	; 0x64
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e0fd      	b.n	8001b5c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	4b81      	ldr	r3, [pc, #516]	; (8001b68 <HAL_RCC_OscConfig+0x4f8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x312>
 8001974:	4b7b      	ldr	r3, [pc, #492]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	4a7a      	ldr	r2, [pc, #488]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6213      	str	r3, [r2, #32]
 8001980:	e02d      	b.n	80019de <HAL_RCC_OscConfig+0x36e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x334>
 800198a:	4b76      	ldr	r3, [pc, #472]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	4a75      	ldr	r2, [pc, #468]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	6213      	str	r3, [r2, #32]
 8001996:	4b73      	ldr	r3, [pc, #460]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	4a72      	ldr	r2, [pc, #456]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 800199c:	f023 0304 	bic.w	r3, r3, #4
 80019a0:	6213      	str	r3, [r2, #32]
 80019a2:	e01c      	b.n	80019de <HAL_RCC_OscConfig+0x36e>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d10c      	bne.n	80019c6 <HAL_RCC_OscConfig+0x356>
 80019ac:	4b6d      	ldr	r3, [pc, #436]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4a6c      	ldr	r2, [pc, #432]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 80019b2:	f043 0304 	orr.w	r3, r3, #4
 80019b6:	6213      	str	r3, [r2, #32]
 80019b8:	4b6a      	ldr	r3, [pc, #424]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4a69      	ldr	r2, [pc, #420]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6213      	str	r3, [r2, #32]
 80019c4:	e00b      	b.n	80019de <HAL_RCC_OscConfig+0x36e>
 80019c6:	4b67      	ldr	r3, [pc, #412]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	4a66      	ldr	r2, [pc, #408]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 80019cc:	f023 0301 	bic.w	r3, r3, #1
 80019d0:	6213      	str	r3, [r2, #32]
 80019d2:	4b64      	ldr	r3, [pc, #400]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	4a63      	ldr	r2, [pc, #396]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	f023 0304 	bic.w	r3, r3, #4
 80019dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d015      	beq.n	8001a12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e6:	f7ff fb7f 	bl	80010e8 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ee:	f7ff fb7b 	bl	80010e8 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e0ab      	b.n	8001b5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a04:	4b57      	ldr	r3, [pc, #348]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0ee      	beq.n	80019ee <HAL_RCC_OscConfig+0x37e>
 8001a10:	e014      	b.n	8001a3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a12:	f7ff fb69 	bl	80010e8 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a18:	e00a      	b.n	8001a30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1a:	f7ff fb65 	bl	80010e8 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e095      	b.n	8001b5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a30:	4b4c      	ldr	r3, [pc, #304]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1ee      	bne.n	8001a1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d105      	bne.n	8001a4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a42:	4b48      	ldr	r3, [pc, #288]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4a47      	ldr	r2, [pc, #284]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 8001a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 8081 	beq.w	8001b5a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a58:	4b42      	ldr	r3, [pc, #264]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d061      	beq.n	8001b28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d146      	bne.n	8001afa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6c:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <HAL_RCC_OscConfig+0x4fc>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a72:	f7ff fb39 	bl	80010e8 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7a:	f7ff fb35 	bl	80010e8 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e067      	b.n	8001b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8c:	4b35      	ldr	r3, [pc, #212]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f0      	bne.n	8001a7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa0:	d108      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aa2:	4b30      	ldr	r3, [pc, #192]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	492d      	ldr	r1, [pc, #180]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a19      	ldr	r1, [r3, #32]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	430b      	orrs	r3, r1
 8001ac6:	4927      	ldr	r1, [pc, #156]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001acc:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <HAL_RCC_OscConfig+0x4fc>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff fb09 	bl	80010e8 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff fb05 	bl	80010e8 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e037      	b.n	8001b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aec:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x46a>
 8001af8:	e02f      	b.n	8001b5a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afa:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <HAL_RCC_OscConfig+0x4fc>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff faf2 	bl	80010e8 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff faee 	bl	80010e8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e020      	b.n	8001b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x498>
 8001b26:	e018      	b.n	8001b5a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e013      	b.n	8001b5c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d106      	bne.n	8001b56 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40007000 	.word	0x40007000
 8001b6c:	42420060 	.word	0x42420060

08001b70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0d0      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b84:	4b6a      	ldr	r3, [pc, #424]	; (8001d30 <HAL_RCC_ClockConfig+0x1c0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d910      	bls.n	8001bb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b67      	ldr	r3, [pc, #412]	; (8001d30 <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 0207 	bic.w	r2, r3, #7
 8001b9a:	4965      	ldr	r1, [pc, #404]	; (8001d30 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b63      	ldr	r3, [pc, #396]	; (8001d30 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0b8      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d020      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bcc:	4b59      	ldr	r3, [pc, #356]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	4a58      	ldr	r2, [pc, #352]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001be4:	4b53      	ldr	r3, [pc, #332]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4a52      	ldr	r2, [pc, #328]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf0:	4b50      	ldr	r3, [pc, #320]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	494d      	ldr	r1, [pc, #308]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d040      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d107      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	4b47      	ldr	r3, [pc, #284]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d115      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e07f      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2e:	4b41      	ldr	r3, [pc, #260]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d109      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e073      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e06b      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c4e:	4b39      	ldr	r3, [pc, #228]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f023 0203 	bic.w	r2, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4936      	ldr	r1, [pc, #216]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c60:	f7ff fa42 	bl	80010e8 <HAL_GetTick>
 8001c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c68:	f7ff fa3e 	bl	80010e8 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e053      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 020c 	and.w	r2, r3, #12
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d1eb      	bne.n	8001c68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c90:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <HAL_RCC_ClockConfig+0x1c0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d210      	bcs.n	8001cc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9e:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 0207 	bic.w	r2, r3, #7
 8001ca6:	4922      	ldr	r1, [pc, #136]	; (8001d30 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cae:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e032      	b.n	8001d26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	4916      	ldr	r1, [pc, #88]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d009      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cea:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	490e      	ldr	r1, [pc, #56]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cfe:	f000 f821 	bl	8001d44 <HAL_RCC_GetSysClockFreq>
 8001d02:	4602      	mov	r2, r0
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	490a      	ldr	r1, [pc, #40]	; (8001d38 <HAL_RCC_ClockConfig+0x1c8>)
 8001d10:	5ccb      	ldrb	r3, [r1, r3]
 8001d12:	fa22 f303 	lsr.w	r3, r2, r3
 8001d16:	4a09      	ldr	r2, [pc, #36]	; (8001d3c <HAL_RCC_ClockConfig+0x1cc>)
 8001d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_RCC_ClockConfig+0x1d0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff f9a0 	bl	8001064 <HAL_InitTick>

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40022000 	.word	0x40022000
 8001d34:	40021000 	.word	0x40021000
 8001d38:	08002668 	.word	0x08002668
 8001d3c:	20000054 	.word	0x20000054
 8001d40:	20000058 	.word	0x20000058

08001d44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d5e:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d002      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x30>
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d003      	beq.n	8001d7a <HAL_RCC_GetSysClockFreq+0x36>
 8001d72:	e027      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x98>)
 8001d76:	613b      	str	r3, [r7, #16]
      break;
 8001d78:	e027      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	0c9b      	lsrs	r3, r3, #18
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	4a17      	ldr	r2, [pc, #92]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d84:	5cd3      	ldrb	r3, [r2, r3]
 8001d86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d010      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	0c5b      	lsrs	r3, r3, #17
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	4a11      	ldr	r2, [pc, #68]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d9e:	5cd3      	ldrb	r3, [r2, r3]
 8001da0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a0d      	ldr	r2, [pc, #52]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x98>)
 8001da6:	fb02 f203 	mul.w	r2, r2, r3
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	e004      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a0c      	ldr	r2, [pc, #48]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001db8:	fb02 f303 	mul.w	r3, r2, r3
 8001dbc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	613b      	str	r3, [r7, #16]
      break;
 8001dc2:	e002      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x98>)
 8001dc6:	613b      	str	r3, [r7, #16]
      break;
 8001dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dca:	693b      	ldr	r3, [r7, #16]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	371c      	adds	r7, #28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	007a1200 	.word	0x007a1200
 8001de0:	08002678 	.word	0x08002678
 8001de4:	08002688 	.word	0x08002688
 8001de8:	003d0900 	.word	0x003d0900

08001dec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <RCC_Delay+0x34>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <RCC_Delay+0x38>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	0a5b      	lsrs	r3, r3, #9
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	fb02 f303 	mul.w	r3, r2, r3
 8001e06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e08:	bf00      	nop
  }
  while (Delay --);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	1e5a      	subs	r2, r3, #1
 8001e0e:	60fa      	str	r2, [r7, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1f9      	bne.n	8001e08 <RCC_Delay+0x1c>
}
 8001e14:	bf00      	nop
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	20000054 	.word	0x20000054
 8001e24:	10624dd3 	.word	0x10624dd3

08001e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e041      	b.n	8001ebe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d106      	bne.n	8001e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff f870 	bl	8000f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3304      	adds	r3, #4
 8001e64:	4619      	mov	r1, r3
 8001e66:	4610      	mov	r0, r2
 8001e68:	f000 fa6e 	bl	8002348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d001      	beq.n	8001ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e035      	b.n	8001f4c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a16      	ldr	r2, [pc, #88]	; (8001f58 <HAL_TIM_Base_Start_IT+0x90>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d009      	beq.n	8001f16 <HAL_TIM_Base_Start_IT+0x4e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0a:	d004      	beq.n	8001f16 <HAL_TIM_Base_Start_IT+0x4e>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <HAL_TIM_Base_Start_IT+0x94>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d111      	bne.n	8001f3a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b06      	cmp	r3, #6
 8001f26:	d010      	beq.n	8001f4a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f38:	e007      	b.n	8001f4a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40012c00 	.word	0x40012c00
 8001f5c:	40000400 	.word	0x40000400

08001f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d122      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d11b      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0202 	mvn.w	r2, #2
 8001f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f9b4 	bl	8002310 <HAL_TIM_IC_CaptureCallback>
 8001fa8:	e005      	b.n	8001fb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f9a7 	bl	80022fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f9b6 	bl	8002322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d122      	bne.n	8002010 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d11b      	bne.n	8002010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0204 	mvn.w	r2, #4
 8001fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f98a 	bl	8002310 <HAL_TIM_IC_CaptureCallback>
 8001ffc:	e005      	b.n	800200a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f97d 	bl	80022fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f98c 	bl	8002322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b08      	cmp	r3, #8
 800201c:	d122      	bne.n	8002064 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b08      	cmp	r3, #8
 800202a:	d11b      	bne.n	8002064 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0208 	mvn.w	r2, #8
 8002034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2204      	movs	r2, #4
 800203a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f960 	bl	8002310 <HAL_TIM_IC_CaptureCallback>
 8002050:	e005      	b.n	800205e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f953 	bl	80022fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f962 	bl	8002322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	2b10      	cmp	r3, #16
 8002070:	d122      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	2b10      	cmp	r3, #16
 800207e:	d11b      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0210 	mvn.w	r2, #16
 8002088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2208      	movs	r2, #8
 800208e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f936 	bl	8002310 <HAL_TIM_IC_CaptureCallback>
 80020a4:	e005      	b.n	80020b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f929 	bl	80022fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f938 	bl	8002322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d10e      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d107      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0201 	mvn.w	r2, #1
 80020dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7fe fee6 	bl	8000eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	2b80      	cmp	r3, #128	; 0x80
 80020f0:	d10e      	bne.n	8002110 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fc:	2b80      	cmp	r3, #128	; 0x80
 80020fe:	d107      	bne.n	8002110 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 fa6b 	bl	80025e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211a:	2b40      	cmp	r3, #64	; 0x40
 800211c:	d10e      	bne.n	800213c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002128:	2b40      	cmp	r3, #64	; 0x40
 800212a:	d107      	bne.n	800213c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f8fc 	bl	8002334 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b20      	cmp	r3, #32
 8002148:	d10e      	bne.n	8002168 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	2b20      	cmp	r3, #32
 8002156:	d107      	bne.n	8002168 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0220 	mvn.w	r2, #32
 8002160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fa36 	bl	80025d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_TIM_ConfigClockSource+0x1c>
 8002188:	2302      	movs	r3, #2
 800218a:	e0b4      	b.n	80022f6 <HAL_TIM_ConfigClockSource+0x186>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c4:	d03e      	beq.n	8002244 <HAL_TIM_ConfigClockSource+0xd4>
 80021c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ca:	f200 8087 	bhi.w	80022dc <HAL_TIM_ConfigClockSource+0x16c>
 80021ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d2:	f000 8086 	beq.w	80022e2 <HAL_TIM_ConfigClockSource+0x172>
 80021d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021da:	d87f      	bhi.n	80022dc <HAL_TIM_ConfigClockSource+0x16c>
 80021dc:	2b70      	cmp	r3, #112	; 0x70
 80021de:	d01a      	beq.n	8002216 <HAL_TIM_ConfigClockSource+0xa6>
 80021e0:	2b70      	cmp	r3, #112	; 0x70
 80021e2:	d87b      	bhi.n	80022dc <HAL_TIM_ConfigClockSource+0x16c>
 80021e4:	2b60      	cmp	r3, #96	; 0x60
 80021e6:	d050      	beq.n	800228a <HAL_TIM_ConfigClockSource+0x11a>
 80021e8:	2b60      	cmp	r3, #96	; 0x60
 80021ea:	d877      	bhi.n	80022dc <HAL_TIM_ConfigClockSource+0x16c>
 80021ec:	2b50      	cmp	r3, #80	; 0x50
 80021ee:	d03c      	beq.n	800226a <HAL_TIM_ConfigClockSource+0xfa>
 80021f0:	2b50      	cmp	r3, #80	; 0x50
 80021f2:	d873      	bhi.n	80022dc <HAL_TIM_ConfigClockSource+0x16c>
 80021f4:	2b40      	cmp	r3, #64	; 0x40
 80021f6:	d058      	beq.n	80022aa <HAL_TIM_ConfigClockSource+0x13a>
 80021f8:	2b40      	cmp	r3, #64	; 0x40
 80021fa:	d86f      	bhi.n	80022dc <HAL_TIM_ConfigClockSource+0x16c>
 80021fc:	2b30      	cmp	r3, #48	; 0x30
 80021fe:	d064      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0x15a>
 8002200:	2b30      	cmp	r3, #48	; 0x30
 8002202:	d86b      	bhi.n	80022dc <HAL_TIM_ConfigClockSource+0x16c>
 8002204:	2b20      	cmp	r3, #32
 8002206:	d060      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0x15a>
 8002208:	2b20      	cmp	r3, #32
 800220a:	d867      	bhi.n	80022dc <HAL_TIM_ConfigClockSource+0x16c>
 800220c:	2b00      	cmp	r3, #0
 800220e:	d05c      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0x15a>
 8002210:	2b10      	cmp	r3, #16
 8002212:	d05a      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0x15a>
 8002214:	e062      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	6899      	ldr	r1, [r3, #8]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f000 f95e 	bl	80024e6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002238:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	609a      	str	r2, [r3, #8]
      break;
 8002242:	e04f      	b.n	80022e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	6899      	ldr	r1, [r3, #8]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f000 f947 	bl	80024e6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002266:	609a      	str	r2, [r3, #8]
      break;
 8002268:	e03c      	b.n	80022e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	6859      	ldr	r1, [r3, #4]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	461a      	mov	r2, r3
 8002278:	f000 f8be 	bl	80023f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2150      	movs	r1, #80	; 0x50
 8002282:	4618      	mov	r0, r3
 8002284:	f000 f915 	bl	80024b2 <TIM_ITRx_SetConfig>
      break;
 8002288:	e02c      	b.n	80022e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6859      	ldr	r1, [r3, #4]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	461a      	mov	r2, r3
 8002298:	f000 f8dc 	bl	8002454 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2160      	movs	r1, #96	; 0x60
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f905 	bl	80024b2 <TIM_ITRx_SetConfig>
      break;
 80022a8:	e01c      	b.n	80022e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6859      	ldr	r1, [r3, #4]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	461a      	mov	r2, r3
 80022b8:	f000 f89e 	bl	80023f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2140      	movs	r1, #64	; 0x40
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 f8f5 	bl	80024b2 <TIM_ITRx_SetConfig>
      break;
 80022c8:	e00c      	b.n	80022e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4619      	mov	r1, r3
 80022d4:	4610      	mov	r0, r2
 80022d6:	f000 f8ec 	bl	80024b2 <TIM_ITRx_SetConfig>
      break;
 80022da:	e003      	b.n	80022e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
      break;
 80022e0:	e000      	b.n	80022e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr

08002322 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr
	...

08002348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a25      	ldr	r2, [pc, #148]	; (80023f0 <TIM_Base_SetConfig+0xa8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d007      	beq.n	8002370 <TIM_Base_SetConfig+0x28>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002366:	d003      	beq.n	8002370 <TIM_Base_SetConfig+0x28>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a22      	ldr	r2, [pc, #136]	; (80023f4 <TIM_Base_SetConfig+0xac>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d108      	bne.n	8002382 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a1a      	ldr	r2, [pc, #104]	; (80023f0 <TIM_Base_SetConfig+0xa8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d007      	beq.n	800239a <TIM_Base_SetConfig+0x52>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002390:	d003      	beq.n	800239a <TIM_Base_SetConfig+0x52>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a17      	ldr	r2, [pc, #92]	; (80023f4 <TIM_Base_SetConfig+0xac>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d108      	bne.n	80023ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <TIM_Base_SetConfig+0xa8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d103      	bne.n	80023e0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	615a      	str	r2, [r3, #20]
}
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	40012c00 	.word	0x40012c00
 80023f4:	40000400 	.word	0x40000400

080023f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	f023 0201 	bic.w	r2, r3, #1
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f023 030a 	bic.w	r3, r3, #10
 8002434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4313      	orrs	r3, r2
 800243c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	621a      	str	r2, [r3, #32]
}
 800244a:	bf00      	nop
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	f023 0210 	bic.w	r2, r3, #16
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800247e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	031b      	lsls	r3, r3, #12
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002490:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	621a      	str	r2, [r3, #32]
}
 80024a8:	bf00      	nop
 80024aa:	371c      	adds	r7, #28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b085      	sub	sp, #20
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f043 0307 	orr.w	r3, r3, #7
 80024d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	609a      	str	r2, [r3, #8]
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr

080024e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b087      	sub	sp, #28
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002500:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	021a      	lsls	r2, r3, #8
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	431a      	orrs	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	4313      	orrs	r3, r2
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4313      	orrs	r3, r2
 8002512:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	609a      	str	r2, [r3, #8]
}
 800251a:	bf00      	nop
 800251c:	371c      	adds	r7, #28
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002538:	2302      	movs	r3, #2
 800253a:	e041      	b.n	80025c0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a14      	ldr	r2, [pc, #80]	; (80025cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d009      	beq.n	8002594 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002588:	d004      	beq.n	8002594 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a10      	ldr	r2, [pc, #64]	; (80025d0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d10c      	bne.n	80025ae <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800259a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40012c00 	.word	0x40012c00
 80025d0:	40000400 	.word	0x40000400

080025d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <__libc_init_array>:
 80025f8:	b570      	push	{r4, r5, r6, lr}
 80025fa:	2600      	movs	r6, #0
 80025fc:	4d0c      	ldr	r5, [pc, #48]	; (8002630 <__libc_init_array+0x38>)
 80025fe:	4c0d      	ldr	r4, [pc, #52]	; (8002634 <__libc_init_array+0x3c>)
 8002600:	1b64      	subs	r4, r4, r5
 8002602:	10a4      	asrs	r4, r4, #2
 8002604:	42a6      	cmp	r6, r4
 8002606:	d109      	bne.n	800261c <__libc_init_array+0x24>
 8002608:	f000 f822 	bl	8002650 <_init>
 800260c:	2600      	movs	r6, #0
 800260e:	4d0a      	ldr	r5, [pc, #40]	; (8002638 <__libc_init_array+0x40>)
 8002610:	4c0a      	ldr	r4, [pc, #40]	; (800263c <__libc_init_array+0x44>)
 8002612:	1b64      	subs	r4, r4, r5
 8002614:	10a4      	asrs	r4, r4, #2
 8002616:	42a6      	cmp	r6, r4
 8002618:	d105      	bne.n	8002626 <__libc_init_array+0x2e>
 800261a:	bd70      	pop	{r4, r5, r6, pc}
 800261c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002620:	4798      	blx	r3
 8002622:	3601      	adds	r6, #1
 8002624:	e7ee      	b.n	8002604 <__libc_init_array+0xc>
 8002626:	f855 3b04 	ldr.w	r3, [r5], #4
 800262a:	4798      	blx	r3
 800262c:	3601      	adds	r6, #1
 800262e:	e7f2      	b.n	8002616 <__libc_init_array+0x1e>
 8002630:	0800268c 	.word	0x0800268c
 8002634:	0800268c 	.word	0x0800268c
 8002638:	0800268c 	.word	0x0800268c
 800263c:	08002690 	.word	0x08002690

08002640 <memset>:
 8002640:	4603      	mov	r3, r0
 8002642:	4402      	add	r2, r0
 8002644:	4293      	cmp	r3, r2
 8002646:	d100      	bne.n	800264a <memset+0xa>
 8002648:	4770      	bx	lr
 800264a:	f803 1b01 	strb.w	r1, [r3], #1
 800264e:	e7f9      	b.n	8002644 <memset+0x4>

08002650 <_init>:
 8002650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002652:	bf00      	nop
 8002654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002656:	bc08      	pop	{r3}
 8002658:	469e      	mov	lr, r3
 800265a:	4770      	bx	lr

0800265c <_fini>:
 800265c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265e:	bf00      	nop
 8002660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002662:	bc08      	pop	{r3}
 8002664:	469e      	mov	lr, r3
 8002666:	4770      	bx	lr
